// Script de diagnostic pour la d√©connexion admin
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç Diagnostic de la d√©connexion admin');

// Fonction pour surveiller les requ√™tes de d√©connexion
window.monitorLogout = function() {
  console.log('üì° Surveillance des requ√™tes de d√©connexion activ√©e');
  
  // Intercepter fetch
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    const url = args[0];
    const options = args[1] || {};
    
    if (url.includes('signout') || url.includes('logout')) {
      console.log(`üö™ Requ√™te de d√©connexion: ${options.method || 'GET'} ${url}`);
      
      const startTime = Date.now();
      
      return originalFetch.apply(this, args)
        .then(response => {
          const duration = Date.now() - startTime;
          console.log(`‚úÖ R√©ponse d√©connexion: ${response.status} (${duration}ms) - ${url}`);
          
          if (response.status === 200) {
            console.log('‚úÖ D√©connexion r√©ussie c√¥t√© serveur');
            console.log('üîÑ V√©rification de la redirection...');
            
            // V√©rifier si on est toujours sur la page admin
            setTimeout(() => {
              if (window.location.pathname.startsWith('/admin')) {
                console.log('‚ùå PROBL√àME: Toujours sur la page admin apr√®s d√©connexion');
                console.log('üîß Tentative de redirection manuelle...');
                window.location.href = '/';
              } else {
                console.log('‚úÖ Redirection r√©ussie');
              }
            }, 1000);
          }
          
          return response;
        })
        .catch(error => {
          const duration = Date.now() - startTime;
          console.log(`‚ùå Erreur d√©connexion: ${error.message} (${duration}ms) - ${url}`);
          throw error;
        });
    }
    
    return originalFetch.apply(this, args);
  };
};

// Fonction pour forcer la d√©connexion
window.forceLogout = function() {
  console.log('üö™ For√ßage de la d√©connexion...');
  
  // M√©thode 1: signOut NextAuth
  if (window.next && window.next.auth) {
    console.log('üîÑ Tentative avec NextAuth...');
    window.next.auth.signOut({ redirect: false })
      .then(() => {
        console.log('‚úÖ NextAuth signOut r√©ussi');
        window.location.href = '/';
      })
      .catch(error => {
        console.error('‚ùå NextAuth signOut √©chou√©:', error);
        window.location.href = '/';
      });
  } else {
    // M√©thode 2: Appel direct √† l'API
    console.log('üîÑ Tentative avec appel API direct...');
    fetch('/api/auth/signout', { method: 'POST' })
      .then(response => {
        console.log('‚úÖ API signout appel√©e:', response.status);
        window.location.href = '/';
      })
      .catch(error => {
        console.error('‚ùå API signout √©chou√©:', error);
        window.location.href = '/';
      });
  }
};

// Fonction pour v√©rifier l'√©tat de la session
window.checkSession = function() {
  console.log('üîç V√©rification de l\'√©tat de la session...');
  
  // V√©rifier les cookies de session
  const cookies = document.cookie.split(';');
  const sessionCookies = cookies.filter(cookie => 
    cookie.includes('next-auth') || cookie.includes('session')
  );
  
  console.log('üç™ Cookies de session:', sessionCookies);
  
  // V√©rifier le localStorage
  const localStorage = window.localStorage;
  const sessionKeys = Object.keys(localStorage).filter(key => 
    key.includes('next-auth') || key.includes('session')
  );
  
  console.log('üíæ Cl√©s de session dans localStorage:', sessionKeys);
  
  // V√©rifier l'URL actuelle
  console.log('üìç URL actuelle:', window.location.href);
  console.log('üîí Sur page admin:', window.location.pathname.startsWith('/admin'));
};

// Fonction pour nettoyer compl√®tement la session
window.clearSession = function() {
  console.log('üßπ Nettoyage complet de la session...');
  
  // Supprimer les cookies
  document.cookie.split(";").forEach(function(c) { 
    document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
  });
  
  // Supprimer le localStorage
  localStorage.clear();
  
  // Supprimer le sessionStorage
  sessionStorage.clear();
  
  console.log('‚úÖ Session nettoy√©e, redirection...');
  window.location.href = '/';
};

console.log('üí° Commandes disponibles:');
console.log('- monitorLogout() : Surveiller les requ√™tes de d√©connexion');
console.log('- forceLogout() : Forcer la d√©connexion');
console.log('- checkSession() : V√©rifier l\'√©tat de la session');
console.log('- clearSession() : Nettoyer compl√®tement la session');
