const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAnalyticsDetailed() {
  console.log('üß™ Test d√©taill√© du syst√®me d\'analytics...\n');

  try {
    // 1. Lister tous les √©tablissements avec leurs analytics
    console.log('üìä 1. Liste des √©tablissements avec analytics...');
    const establishments = await prisma.establishment.findMany({
      select: {
        id: true,
        name: true,
        slug: true,
        clickAnalytics: {
          select: {
            id: true,
            elementType: true,
            elementId: true,
            elementName: true,
            action: true,
            timestamp: true,
          },
          orderBy: {
            timestamp: 'desc',
          },
          take: 5,
        },
      },
      take: 10,
    });

    console.log(`‚úÖ ${establishments.length} √©tablissements trouv√©s\n`);

    establishments.forEach((est, index) => {
      console.log(`${index + 1}. ${est.name} (${est.slug})`);
      console.log(`   ID: ${est.id}`);
      console.log(`   Analytics: ${est.clickAnalytics.length} interactions r√©centes`);
      
      if (est.clickAnalytics.length > 0) {
        console.log(`   Derni√®res interactions:`);
        est.clickAnalytics.forEach((click, i) => {
          console.log(`      ${i + 1}. ${click.elementName || click.elementId} (${click.elementType}) - ${click.action}`);
        });
      }
      console.log('');
    });

    // 2. Statistiques globales
    console.log('üìä 2. Statistiques globales...');
    const totalClicks = await prisma.clickAnalytics.count();
    const totalEstablishments = await prisma.establishment.count();
    
    console.log(`   - Total interactions: ${totalClicks}`);
    console.log(`   - Total √©tablissements: ${totalEstablishments}`);
    console.log(`   - Moyenne par √©tablissement: ${Math.round(totalClicks / totalEstablishments)}`);
    console.log('');

    // 3. Distribution par type d'action
    console.log('üìä 3. Distribution par type d\'action...');
    const actionStats = await prisma.clickAnalytics.groupBy({
      by: ['action'],
      _count: {
        id: true,
      },
    });

    actionStats.forEach(stat => {
      console.log(`   - ${stat.action}: ${stat._count.id} fois`);
    });
    console.log('');

    // 4. Distribution par type d'√©l√©ment
    console.log('üìä 4. Distribution par type d\'√©l√©ment...');
    const elementTypeStats = await prisma.clickAnalytics.groupBy({
      by: ['elementType'],
      _count: {
        id: true,
      },
    });

    elementTypeStats.forEach(stat => {
      console.log(`   - ${stat.elementType}: ${stat._count.id} interactions`);
    });
    console.log('');

    // 5. √âl√©ments les plus populaires (tous √©tablissements confondus)
    console.log('üìä 5. Top 10 des √©l√©ments les plus populaires (global)...');
    const topGlobal = await prisma.clickAnalytics.groupBy({
      by: ['elementName', 'elementType'],
      _count: {
        id: true,
      },
      orderBy: {
        _count: {
          id: 'desc',
        },
      },
      take: 10,
    });

    topGlobal.forEach((element, index) => {
      console.log(`   ${index + 1}. ${element.elementName || 'N/A'} (${element.elementType}): ${element._count.id} clics`);
    });
    console.log('');

    // 6. Activit√© r√©cente
    console.log('üìä 6. 10 derni√®res interactions...');
    const recentClicks = await prisma.clickAnalytics.findMany({
      select: {
        elementName: true,
        elementType: true,
        action: true,
        timestamp: true,
        establishment: {
          select: {
            name: true,
          },
        },
      },
      orderBy: {
        timestamp: 'desc',
      },
      take: 10,
    });

    recentClicks.forEach((click, index) => {
      const date = new Date(click.timestamp).toLocaleString('fr-FR');
      console.log(`   ${index + 1}. ${click.establishment.name} - ${click.elementName} (${click.action}) - ${date}`);
    });
    console.log('');

    // 7. Test de structure des donn√©es
    console.log('üìä 7. Validation de la structure des donn√©es...');
    const sampleClick = await prisma.clickAnalytics.findFirst({
      include: {
        establishment: {
          select: {
            name: true,
            slug: true,
          },
        },
      },
    });

    if (sampleClick) {
      console.log('   ‚úÖ Structure valid√©e:');
      console.log(`      - ID: ${sampleClick.id}`);
      console.log(`      - √âtablissement: ${sampleClick.establishment.name}`);
      console.log(`      - Type: ${sampleClick.elementType}`);
      console.log(`      - √âl√©ment: ${sampleClick.elementName || sampleClick.elementId}`);
      console.log(`      - Action: ${sampleClick.action}`);
      console.log(`      - UserAgent: ${sampleClick.userAgent?.substring(0, 50)}...`);
      console.log(`      - Timestamp: ${new Date(sampleClick.timestamp).toLocaleString('fr-FR')}`);
    }
    console.log('');

    // 8. R√©sum√© et recommandations
    console.log('‚úÖ Test d√©taill√© termin√©!\n');
    console.log('üìå R√©sum√©:');
    console.log(`   - ${totalClicks} interactions enregistr√©es`);
    console.log(`   - ${totalEstablishments} √©tablissements`);
    console.log(`   - ${actionStats.length} types d'actions diff√©rentes`);
    console.log(`   - ${elementTypeStats.length} types d'√©l√©ments track√©s`);
    console.log('');
    console.log('üéØ Le syst√®me est op√©rationnel!');
    console.log('   Vous pouvez maintenant:');
    console.log('   - Visiter les pages publiques et interagir');
    console.log('   - Consulter les dashboards analytics');
    console.log('   - Analyser le comportement des utilisateurs');
    console.log('');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAnalyticsDetailed();

