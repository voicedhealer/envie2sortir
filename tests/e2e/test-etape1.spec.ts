import { test, expect } from '@playwright/test';

/**
 * Test simple - Juste la premi√®re √©tape du formulaire
 */

test.describe('Test √âtape 1 - Formulaire de compte', () => {
  
  test('Remplir et valider la premi√®re √©tape', async ({ page }) => {
    console.log('üöÄ Test de la premi√®re √©tape...');
    
    // Aller sur la page
    await page.goto('/etablissements/nouveau');
    await page.waitForLoadState('networkidle');
    await page.waitForSelector('input[placeholder="Votre pr√©nom"]');
    
    console.log('‚úÖ Page charg√©e et formulaire visible');
    
    // Remplir le formulaire
    await page.fill('input[placeholder="Votre pr√©nom"]', 'Marie');
    await page.fill('input[placeholder="Votre nom"]', 'Dupont');
    await page.fill('input[placeholder="votre.email@exemple.com"]', `test-etape1-${Date.now()}@example.com`);
    await page.fill('input[placeholder="Ex: MonMotDePasse123!"]', 'MotDePasse123!');
    await page.fill('input[placeholder="R√©p√©tez votre mot de passe"]', 'MotDePasse123!');
    await page.fill('input[placeholder="06 12 34 56 78 (mobile uniquement)"]', '+33612345678');
    
    console.log('‚úÖ Formulaire rempli');
    
    // Capturer une screenshot
    await page.screenshot({ path: 'playwright-report/etape1-rempli.png' });
    
    // Cliquer sur le bouton de validation (m√™me s'il est d√©sactiv√©, il peut d√©clencher la modal)
    const nextButton = page.locator('button:has-text("Suivant"), button:has-text("Validez votre t√©l√©phone")');
    
    // Essayer de cliquer normalement d'abord
    try {
      await nextButton.click({ timeout: 5000 });
    } catch (error) {
      console.log('‚ö†Ô∏è Clic normal √©chou√©, tentative de clic forc√©...');
      // Si le clic normal √©choue, forcer le clic
      await nextButton.click({ force: true });
    }
    
    console.log('‚úÖ Bouton de validation cliqu√©');
    
    // Attendre que la modal de v√©rification SMS apparaisse
    await page.waitForSelector('text=V√©rification du num√©ro', { timeout: 10000 });
    console.log('‚úÖ Modal de v√©rification SMS ouverte');
    
    // Attendre que le SMS soit envoy√©
    await page.waitForSelector('text=Code de v√©rification envoy√©', { timeout: 5000 });
    console.log('‚úÖ SMS envoy√©, code disponible');
    
    // Remplir le code de v√©rification (essayer les codes possibles)
    const verificationCodes = ['111111', '000000', '999999', '123456'];
    let codeAccepted = false;
    
    for (const code of verificationCodes) {
      try {
        console.log(`üîê Tentative avec le code: ${code}`);
        
        // Trouver le champ de code de v√©rification (plus sp√©cifique)
        const codeInput = page.locator('input[placeholder*="Code de v√©rification"], input[type="text"]:near(text="Code de v√©rification *")');
        
        // Vider le champ et remplir le code
        await codeInput.clear();
        await codeInput.fill(code);
        
        console.log(`üìù Code ${code} saisi dans le champ`);
        
        // Attendre que le bouton "V√©rifier" soit cliquable
        const verifyButton = page.locator('button:has-text("V√©rifier")');
        await verifyButton.waitFor({ state: 'visible', timeout: 5000 });
        
        // Cliquer sur "V√©rifier"
        await verifyButton.click();
        console.log(`üîç Bouton "V√©rifier" cliqu√© pour le code ${code}`);
        
        // Attendre un peu pour voir si √ßa fonctionne
        await page.waitForTimeout(3000);
        
        // V√©rifier si la modal a disparu (succ√®s)
        const modalVisible = await page.locator('text=V√©rification du num√©ro').isVisible();
        if (!modalVisible) {
          console.log(`‚úÖ Code ${code} accept√© ! Modal ferm√©e.`);
          codeAccepted = true;
          break;
        }
        
        console.log(`‚ùå Code ${code} refus√©, essai suivant...`);
        
        // Si le code est refus√©, attendre un peu avant d'essayer le suivant
        await page.waitForTimeout(1000);
        
      } catch (error) {
        console.log(`‚ùå Erreur avec le code ${code}:`, error);
        // Continuer avec le code suivant
      }
    }
    
    if (!codeAccepted) {
      throw new Error('Aucun code de v√©rification n\'a fonctionn√©');
    }
    
    console.log('‚úÖ V√©rification SMS termin√©e');
    
    // Attendre la transition
    await page.waitForTimeout(2000);
    
    // V√©rifier qu'on passe √† l'√©tape suivante
    // Chercher un √©l√©ment qui indique qu'on est √† l'√©tape 2
    const step2Indicator = page.locator('text=√âtape 2, text=SIRET, text=Professionnel');
    const isStep2Visible = await step2Indicator.isVisible();
    
    if (isStep2Visible) {
      console.log('‚úÖ Transition vers l\'√©tape 2 r√©ussie');
      await page.screenshot({ path: 'playwright-report/etape2-atteinte.png' });
    } else {
      console.log('‚ö†Ô∏è Transition vers l\'√©tape 2 non d√©tect√©e');
      await page.screenshot({ path: 'playwright-report/etape2-probleme.png' });
      
      // Afficher le contenu de la page pour debug
      const pageContent = await page.textContent('body');
      console.log('üìÑ Contenu de la page:', pageContent?.substring(0, 500));
    }
    
    console.log('üéâ Test de l\'√©tape 1 termin√© !');
  });
});
