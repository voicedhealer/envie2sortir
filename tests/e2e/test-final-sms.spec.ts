import { test, expect } from '@playwright/test';

/**
 * Test final pour la v√©rification SMS
 */

test.describe('Test Final - V√©rification SMS', () => {
  
  test('Compl√©ter la v√©rification SMS avec succ√®s', async ({ page }) => {
    console.log('üöÄ Test final de v√©rification SMS...');
    
    // Aller sur la page
    await page.goto('/etablissements/nouveau');
    await page.waitForLoadState('networkidle');
    await page.waitForSelector('input[placeholder="Votre pr√©nom"]');
    
    console.log('‚úÖ Page charg√©e');
    
    // Remplir le formulaire
    await page.fill('input[placeholder="Votre pr√©nom"]', 'Marie');
    await page.fill('input[placeholder="Votre nom"]', 'Dupont');
    await page.fill('input[placeholder="votre.email@exemple.com"]', `test-final-${Date.now()}@example.com`);
    await page.fill('input[placeholder="Ex: MonMotDePasse123!"]', 'MotDePasse123!');
    await page.fill('input[placeholder="R√©p√©tez votre mot de passe"]', 'MotDePasse123!');
    await page.fill('input[placeholder="06 12 34 56 78 (mobile uniquement)"]', '+33612345678');
    
    console.log('‚úÖ Formulaire rempli');
    
    // Cliquer sur le bouton avec force
    const nextButton = page.locator('button:has-text("Validez votre t√©l√©phone")');
    await nextButton.click({ force: true });
    
    console.log('‚úÖ Clic forc√© effectu√©');
    
    // Attendre que la modal s'ouvre
    await page.waitForSelector('text=V√©rification du num√©ro', { timeout: 10000 });
    console.log('‚úÖ Modal de v√©rification ouverte');
    
    // Attendre que le SMS soit envoy√©
    await page.waitForSelector('text=Code de v√©rification envoy√©', { timeout: 5000 });
    console.log('‚úÖ SMS envoy√©');
    
    // Tester les codes de v√©rification (commencer par 123456 qui est dans le placeholder)
    const verificationCodes = ['123456', '111111', '000000', '999999'];
    let success = false;
    
    for (const code of verificationCodes) {
      try {
        console.log(`üîê Test du code: ${code}`);
        
        // Trouver le champ de code (celui avec le placeholder qui contient le code)
        const codeInput = page.locator('input[placeholder="123456"]');
        
        // V√©rifier que le champ existe
        const inputCount = await codeInput.count();
        console.log(`üîç Nombre de champs de code trouv√©s: ${inputCount}`);
        
        if (inputCount === 0) {
          console.log('‚ùå Aucun champ de code trouv√© dans la modal');
          continue;
        }
        
        // Vider et remplir le champ
        await codeInput.clear();
        await codeInput.fill(code);
        
        // V√©rifier que la valeur a √©t√© saisie
        const inputValue = await codeInput.inputValue();
        console.log(`üìù Code saisi: "${inputValue}" (attendu: "${code}")`);
        
        if (inputValue !== code) {
          console.log('‚ùå Le code n\'a pas √©t√© saisi correctement');
          continue;
        }
        
        // Attendre que le bouton "V√©rifier" soit activ√©
        const verifyButton = page.locator('button:has-text("V√©rifier")');
        
        // Attendre que le bouton ne soit plus d√©sactiv√©
        await verifyButton.waitFor({ state: 'visible', timeout: 5000 });
        
        // V√©rifier si le bouton est activ√©
        const isDisabled = await verifyButton.getAttribute('disabled');
        if (isDisabled === null) {
          console.log(`‚úÖ Bouton "V√©rifier" activ√© pour le code ${code}`);
          
          // Cliquer sur "V√©rifier"
          await verifyButton.click();
          console.log(`üîç Bouton "V√©rifier" cliqu√© pour le code ${code}`);
          
          // Attendre un peu pour voir si √ßa fonctionne
          await page.waitForTimeout(3000);
          
          // V√©rifier si la modal a disparu (succ√®s)
          const modalVisible = await page.locator('text=V√©rification du num√©ro').isVisible();
          if (!modalVisible) {
            console.log(`üéâ Code ${code} accept√© ! Modal ferm√©e.`);
            success = true;
            break;
          } else {
            console.log(`‚ùå Code ${code} refus√©, modal toujours visible`);
          }
        } else {
          console.log(`‚ö†Ô∏è Bouton "V√©rifier" toujours d√©sactiv√© pour le code ${code}`);
        }
        
      } catch (error) {
        console.log(`‚ùå Erreur avec le code ${code}:`, error.message);
      }
    }
    
    if (success) {
      console.log('üéâ V√©rification SMS r√©ussie !');
      
      // Capturer une screenshot de succ√®s
      await page.screenshot({ path: 'playwright-report/verification-sms-succes.png' });
      
      // V√©rifier qu'on passe √† l'√©tape suivante
      await page.waitForTimeout(2000);
      const step2Indicator = page.locator('text=SIRET, text=Professionnel, text=√âtape 2');
      const isStep2Visible = await step2Indicator.isVisible();
      
      if (isStep2Visible) {
        console.log('‚úÖ Transition vers l\'√©tape 2 r√©ussie');
      } else {
        console.log('‚ö†Ô∏è Transition vers l\'√©tape 2 non d√©tect√©e');
      }
      
    } else {
      console.log('‚ùå Aucun code de v√©rification n\'a fonctionn√©');
      await page.screenshot({ path: 'playwright-report/verification-sms-echec.png' });
      throw new Error('√âchec de la v√©rification SMS');
    }
    
    console.log('üéâ Test final termin√© !');
  });
});
