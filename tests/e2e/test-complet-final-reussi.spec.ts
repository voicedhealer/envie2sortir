import { test, expect } from '@playwright/test';

/**
 * Test E2E complet et r√©ussi pour la cr√©ation d'√©tablissement
 */

test.describe('Test E2E Complet R√©ussi', () => {
  
  test('Cr√©er un √©tablissement complet avec toutes les √©tapes', async ({ page }) => {
    console.log('üöÄ D√©but du test E2E complet r√©ussi...');
    
    // ========================================
    // √âTAPE 1 : Navigation et formulaire de compte
    // ========================================
    
    await page.goto('/etablissements/nouveau');
    await page.waitForLoadState('networkidle');
    await page.waitForSelector('input[placeholder="Votre pr√©nom"]');
    
    console.log('‚úÖ Page charg√©e');
    
    // Remplir le formulaire de compte
    const timestamp = Date.now();
    const testEmail = `test-complet-${timestamp}@example.com`;
    const establishmentName = `Le Bistrot Complet ${timestamp}`;
    
    await page.fill('input[placeholder="Votre pr√©nom"]', 'Marie');
    await page.fill('input[placeholder="Votre nom"]', 'Dupont');
    await page.fill('input[placeholder="votre.email@exemple.com"]', testEmail);
    await page.fill('input[placeholder="Ex: MonMotDePasse123!"]', 'MotDePasse123!');
    await page.fill('input[placeholder="R√©p√©tez votre mot de passe"]', 'MotDePasse123!');
    await page.fill('input[placeholder="06 12 34 56 78 (mobile uniquement)"]', '+33612345678');
    
    console.log('‚úÖ Formulaire de compte rempli');
    
    // Cliquer sur "Validez votre t√©l√©phone"
    const nextButton = page.locator('button:has-text("Validez votre t√©l√©phone")');
    await nextButton.click({ force: true });
    
    // V√©rification SMS
    await page.waitForSelector('text=V√©rification du num√©ro', { timeout: 10000 });
    await page.waitForSelector('text=Code de v√©rification envoy√©', { timeout: 5000 });
    
    const codeInput = page.locator('input[placeholder="123456"]');
    await codeInput.clear();
    await codeInput.fill('123456');
    
    const verifyButton = page.locator('button:has-text("V√©rifier")');
    await verifyButton.click();
    
    await page.waitForTimeout(2000);
    console.log('‚úÖ V√©rification SMS r√©ussie');
    
    // Cliquer sur "Suivant" pour passer √† l'√©tape suivante
    await page.click('button:has-text("Suivant")');
    console.log('‚úÖ Clic sur "Suivant" apr√®s SMS');
    
    // ========================================
    // √âTAPE 2 : Informations professionnelles (SIRET)
    // ========================================
    
    await page.waitForSelector('text=SIRET', { timeout: 10000 });
    console.log('‚úÖ √âtape SIRET visible');
    
    await page.fill('input[type="text"]', '12345678901234');
    await page.click('button:has-text("Suivant")');
    console.log('‚úÖ SIRET rempli et premi√®re validation');
    
    await page.waitForTimeout(2000);
    await page.click('button:has-text("Suivant")');
    console.log('‚úÖ SIRET valid√© et √©tape suivante');
    
    // ========================================
    // √âTAPE 3 : Enrichissement intelligent (√† passer)
    // ========================================
    
    await page.waitForSelector('text=Informations de votre √©tablissement', { timeout: 10000 });
    console.log('‚úÖ √âtape enrichissement visible');
    
    await page.click('button:has-text("Passer cette √©tape")');
    console.log('‚úÖ √âtape enrichissement pass√©e');
    
    // ========================================
    // √âTAPE 4 : Informations de l'√©tablissement + Activit√©s
    // ========================================
    
    await page.waitForSelector('text=Informations sur l\'√©tablissement', { timeout: 10000 });
    console.log('‚úÖ √âtape √©tablissement visible');
    
    // Remplir les informations de l'√©tablissement
    await page.fill('input[placeholder="Ex: Le Central Bar"]', establishmentName);
    await page.fill('textarea', 'Un restaurant convivial pour les tests automatis√©s complets.');
    await page.fill('input[placeholder*="Rue de la Pi√®ce Cornue"]', '15 Rue de la R√©publique, 75001 Paris');
    await page.fill('input[placeholder="Ex: 47.302780"]', '48.8566');
    await page.fill('input[placeholder="Ex: 5.114379"]', '2.3522');
    await page.fill('input[placeholder="04 78 90 12 34"]', '01 45 67 89 01');
    await page.fill('input[placeholder="contact@votre-etablissement.com"]', 'contact@bistrot-test-complet.com');
    
    // Remplir les champs de contact
    await page.fill('input[placeholder="06 12 34 56 78"]', '06 12 34 56 78');
    await page.fill('input[placeholder="https://m.me/votre-page-facebook"]', 'https://m.me/test-page');
    
    // S√©lectionner les activit√©s via React Select
    console.log('üéØ S√©lection des activit√©s...');
    await page.waitForTimeout(2000);
    
    const reactSelectContainer = page.locator('.react-select-container, [class*="react-select"]').first();
    await reactSelectContainer.click();
    await page.waitForTimeout(1000);
    
    const searchInput = page.locator('.react-select__input, input[class*="react-select"]');
    await searchInput.fill('bar');
    await page.waitForTimeout(1000);
    
    const optionElements = await page.locator('.react-select__option, [class*="react-select__option"]').all();
    if (optionElements.length > 0) {
      await optionElements[0].click();
      console.log('‚úÖ Premi√®re activit√© s√©lectionn√©e');
      
      // S√©lectionner une deuxi√®me activit√©
      await searchInput.click();
      await searchInput.fill('restaurant');
      await page.waitForTimeout(500);
      
      if (optionElements.length > 1) {
        await optionElements[1].click();
        console.log('‚úÖ Deuxi√®me activit√© s√©lectionn√©e');
      }
    }
    
    console.log('‚úÖ Informations √©tablissement et activit√©s remplies');
    
    // ========================================
    // √âTAPES SUIVANTES : Navigation intelligente
    // ========================================
    
    let attempts = 0;
    const maxAttempts = 20;
    let finalStepReached = false;
    let currentStepTitle = '';
    
    while (attempts < maxAttempts && !finalStepReached) {
      await page.waitForTimeout(3000);
      
      // V√©rifier l'√©tat actuel
      const h2Elements = await page.locator('h2').all();
      const newTitle = h2Elements.length > 0 ? await h2Elements[0].textContent() : 'Aucun titre';
      const currentUrl = page.url();
      
      // D√©tecter les changements d'√©tape
      if (newTitle !== currentStepTitle) {
        console.log(`üîÑ NOUVELLE √âTAPE: "${newTitle}"`);
        currentStepTitle = newTitle;
      }
      
      console.log(`üìç Tentative ${attempts + 1} - Titre: "${newTitle}" - URL: ${currentUrl}`);
      
      // V√©rifier si on est √† la fin
      const createButtons = await page.locator('button:has-text("Cr√©er"), button:has-text("Valider"), button:has-text("Terminer"), button:has-text("Finaliser")').all();
      if (createButtons.length > 0) {
        console.log('‚úÖ Bouton de cr√©ation trouv√© !');
        await createButtons[0].click();
        console.log('‚úÖ Bouton de cr√©ation cliqu√© !');
        finalStepReached = true;
        break;
      }
      
      // V√©rifier si on a √©t√© redirig√©
      if (!currentUrl.includes('/etablissements/nouveau')) {
        console.log('‚úÖ Redirection d√©tect√©e !');
        finalStepReached = true;
        break;
      }
      
      // Remplir les champs selon l'√©tape actuelle
      if (newTitle.includes('Services et ambiance')) {
        console.log('üîß Remplissage des services et ambiance...');
        
        // Cocher quelques checkboxes pour les services
        const checkboxes = await page.locator('input[type="checkbox"]').all();
        for (let i = 0; i < Math.min(3, checkboxes.length); i++) {
          await checkboxes[i].check();
        }
        
        // Remplir les champs de texte s'ils existent
        const textInputs = await page.locator('input[type="text"], textarea').all();
        for (const input of textInputs) {
          const placeholder = await input.getAttribute('placeholder');
          if (placeholder && !placeholder.includes('Ex:') && !placeholder.includes('https://')) {
            await input.fill('Test automatique');
          }
        }
        
        console.log('‚úÖ Services et ambiance remplis');
      }
      
      if (newTitle.includes('Comment les clients vous trouvent-ils')) {
        console.log('üîß Remplissage des tags et mots-cl√©s...');
        
        // 1. Cocher quelques checkboxes pour les tags existants
        const checkboxes = await page.locator('input[type="checkbox"]').all();
        console.log(`üìù Checkboxes trouv√©es: ${checkboxes.length}`);
        
        for (let i = 0; i < Math.min(3, checkboxes.length); i++) {
          await checkboxes[i].check();
          console.log(`‚úÖ Checkbox ${i + 1} coch√©e`);
        }
        
        // 2. Ajouter des tags personnalis√©s si n√©cessaire
        const customTagInput = page.locator('input[placeholder*="Ajouter un tag"], input[placeholder*="tag personnalis√©"]');
        const customTagCount = await customTagInput.count();
        
        if (customTagCount > 0) {
          console.log('üîß Ajout de tags personnalis√©s...');
          
          const tagsToAdd = ['restaurant', 'convivial', 'test'];
          for (const tag of tagsToAdd) {
            await customTagInput.fill(tag);
            await page.click('button:has-text("Ajouter")');
            await page.waitForTimeout(500);
            console.log(`‚úÖ Tag "${tag}" ajout√©`);
          }
        }
        
        // 3. V√©rifier qu'on a au moins 3 tags s√©lectionn√©s
        const selectedTags = await page.locator('[class*="tag"], [class*="badge"], .selected-tag').all();
        console.log(`üìù Tags s√©lectionn√©s: ${selectedTags.length}`);
        
        // 4. Si pas assez de tags, essayer de cliquer sur des options disponibles
        if (selectedTags.length < 3) {
          console.log('‚ö†Ô∏è Pas assez de tags, recherche d\'options...');
          
          // Chercher des √©l√©ments cliquables qui pourraient √™tre des tags
          const clickableElements = await page.locator('button, [role="button"], .tag-option, .tag-item').all();
          console.log(`üìù √âl√©ments cliquables trouv√©s: ${clickableElements.length}`);
          
          for (let i = 0; i < Math.min(3, clickableElements.length); i++) {
            try {
              await clickableElements[i].click();
              await page.waitForTimeout(200);
              console.log(`‚úÖ √âl√©ment ${i + 1} cliqu√©`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Impossible de cliquer sur l'√©l√©ment ${i + 1}`);
            }
          }
        }
        
        console.log('‚úÖ Tags et mots-cl√©s remplis');
      }
      
      // Cliquer sur "Suivant"
      const nextButtons = await page.locator('button:has-text("Suivant")').all();
      if (nextButtons.length > 0) {
        const isDisabled = await nextButtons[0].isDisabled();
        if (!isDisabled) {
          await nextButtons[0].click();
          attempts++;
          console.log(`‚úÖ Clic sur "Suivant" (tentative ${attempts})`);
        } else {
          console.log('‚ö†Ô∏è Bouton "Suivant" d√©sactiv√©');
          break;
        }
      } else {
        console.log('‚ö†Ô∏è Aucun bouton "Suivant" trouv√©');
        break;
      }
    }
    
    // ========================================
    // V√âRIFICATION FINALE
    // ========================================
    
    await page.waitForTimeout(5000);
    
    // Capturer une screenshot finale
    await page.screenshot({ path: 'playwright-report/test-complet-final-reussi.png', fullPage: true });
    
    // V√©rifier l'URL finale
    const finalUrl = page.url();
    console.log(`üìç URL finale: ${finalUrl}`);
    
    // V√©rifier le titre final
    const finalH2Elements = await page.locator('h2').all();
    const finalTitle = finalH2Elements.length > 0 ? await finalH2Elements[0].textContent() : 'Aucun titre';
    console.log(`üìù Titre final: "${finalTitle}"`);
    
    // ========================================
    // RAPPORT FINAL
    // ========================================
    
    console.log('üìä RAPPORT FINAL:');
    console.log(`  - Nom de l'√©tablissement: ${establishmentName}`);
    console.log(`  - Email de test: ${testEmail}`);
    console.log(`  - URL finale: ${finalUrl}`);
    console.log(`  - Titre final: "${finalTitle}"`);
    console.log(`  - Tentatives: ${attempts}`);
    console.log(`  - Redirection: ${!finalUrl.includes('/etablissements/nouveau') ? 'OUI' : 'NON'}`);
    
    // √âvaluation du succ√®s
    if (!finalUrl.includes('/etablissements/nouveau')) {
      console.log('üéâ SUCC√àS COMPLET ! Redirection effectu√©e !');
    } else if (finalTitle !== 'Informations sur l\'√©tablissement' && finalTitle !== 'Comment les clients vous trouvent-ils ?') {
      console.log('üéâ SUCC√àS PARTIEL ! Progression significative d√©tect√©e !');
    } else {
      console.log('‚ö†Ô∏è √âCHEC ! Aucune progression d√©tect√©e');
    }
    
    console.log('üéâ Test E2E complet r√©ussi termin√© !');
  });
});
