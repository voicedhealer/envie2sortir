// Script de test pour le syst√®me d'enrichissement
// Ce script teste les diff√©rentes APIs et fonctionnalit√©s

const testUrls = [
  // Restaurant fran√ßais √† Paris
  'https://maps.google.com/maps/place/Restaurant+Le+Central/@48.8566,2.3522,17z/data=!3m1!4b1!4m6!3m5!1s0x47e66e1f06e2b70f:0x40b82c3688c9460!8m2!3d48.8566!4d2.3522!16s%2Fg%2F11c0w8r0x0',
  
  // Bar parisien
  'https://maps.google.com/maps/place/Le+Comptoir+du+Relais/@48.8566,2.3522,17z/data=!3m1!4b1!4m6!3m5!1s0x47e66e1f06e2b70f:0x40b82c3688c9460!8m2!3d48.8566!4d2.3522!16s%2Fg%2F11c0w8r0x0',
  
  // Format court Google Maps
  'https://goo.gl/maps/ABC123',
  
  // Format avec place_id
  'https://maps.google.com/maps/place/?q=place_id:ChIJN1t_tDeuEmsRUsoyG83frY4'
];

async function testUrlResolution() {
  console.log('üß™ Test de r√©solution d\'URLs Google Maps...\n');
  
  for (const url of testUrls) {
    try {
      console.log(`üìù Test URL: ${url}`);
      
      const response = await fetch('http://localhost:3000/api/resolve-google-url', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url })
      });
      
      const data = await response.json();
      
      if (data.success) {
        console.log(`‚úÖ Place ID extrait: ${data.placeId}`);
      } else {
        console.log(`‚ùå Erreur: ${data.error}`);
      }
      
    } catch (error) {
      console.log(`‚ùå Erreur r√©seau: ${error.message}`);
    }
    
    console.log('---');
  }
}

async function testGooglePlacesProxy() {
  console.log('\nüß™ Test du proxy Google Places...\n');
  
  // Place ID d'exemple (restaurant parisien)
  const testPlaceId = 'ChIJN1t_tDeuEmsRUsoyG83frY4';
  
  try {
    const response = await fetch('http://localhost:3000/api/google-places-proxy', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        placeId: testPlaceId,
        fields: 'name,types,price_level,rating,user_ratings_total,opening_hours,website,formatted_phone_number,reviews,photos,formatted_address',
        apiKey: 'YOUR_API_KEY_HERE' // √Ä remplacer par votre vraie cl√©
      })
    });
    
    const data = await response.json();
    
    if (data.result) {
      console.log('‚úÖ Donn√©es Google Places r√©cup√©r√©es:');
      console.log(`   Nom: ${data.result.name}`);
      console.log(`   Types: ${data.result.types?.join(', ')}`);
      console.log(`   Note: ${data.result.rating}/5`);
      console.log(`   Prix: ${data.result.price_level || 'Non sp√©cifi√©'}`);
      console.log(`   Adresse: ${data.result.formatted_address}`);
    } else {
      console.log('‚ùå Erreur:', data.error || 'Donn√©es non trouv√©es');
    }
    
  } catch (error) {
    console.log(`‚ùå Erreur r√©seau: ${error.message}`);
  }
}

async function testEnrichmentSystem() {
  console.log('\nüß™ Test du syst√®me d\'enrichissement complet...\n');
  
  const testUrl = testUrls[0]; // Premier URL de test
  
  try {
    // Simuler l'appel au syst√®me d'enrichissement
    console.log(`üìù Test d'enrichissement avec: ${testUrl}`);
    
    // 1. R√©solution de l'URL
    const resolveResponse = await fetch('http://localhost:3000/api/resolve-google-url', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: testUrl })
    });
    
    const resolveData = await resolveResponse.json();
    
    if (!resolveData.success) {
      console.log('‚ùå Impossible de r√©soudre l\'URL');
      return;
    }
    
    console.log(`‚úÖ Place ID r√©solu: ${resolveData.placeId}`);
    
    // 2. R√©cup√©ration des donn√©es Google Places
    const placesResponse = await fetch('http://localhost:3000/api/google-places-proxy', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        placeId: resolveData.placeId,
        fields: 'name,types,price_level,rating,user_ratings_total,opening_hours,website,formatted_phone_number,reviews,photos,formatted_address',
        apiKey: 'YOUR_API_KEY_HERE' // √Ä remplacer par votre vraie cl√©
      })
    });
    
    const placesData = await placesResponse.json();
    
    if (placesData.result) {
      console.log('‚úÖ Donn√©es Google Places r√©cup√©r√©es');
      
      // 3. Simulation de la g√©n√©ration de tags "envie"
      const mockEnrichmentData = {
        name: placesData.result.name,
        establishmentType: 'restaurant', // Simul√©
        priceLevel: placesData.result.price_level || 2,
        rating: placesData.result.rating || 0,
        address: placesData.result.formatted_address,
        phone: placesData.result.formatted_phone_number,
        website: placesData.result.website,
        envieTags: [
          'Envie de bien manger',
          'Envie de sortir d√Æner',
          'Envie de d√©couvrir',
          'Envie de fran√ßais',
          'Envie de tradition'
        ],
        specialties: ['Envie de moules frites', 'Envie de coq au vin'],
        atmosphere: ['Envie de romantique', 'Envie de familial'],
        accessibility: ['Accessible PMR'],
        googlePlaceId: resolveData.placeId,
        googleBusinessUrl: testUrl,
        googleRating: placesData.result.rating || 0,
        googleReviewCount: placesData.result.user_ratings_total || 0
      };
      
      console.log('üéØ Donn√©es d\'enrichissement g√©n√©r√©es:');
      console.log(`   Nom: ${mockEnrichmentData.name}`);
      console.log(`   Type: ${mockEnrichmentData.establishmentType}`);
      console.log(`   Tags "envie": ${mockEnrichmentData.envieTags.join(', ')}`);
      console.log(`   Sp√©cialit√©s: ${mockEnrichmentData.specialties.join(', ')}`);
      
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es Google Places');
    }
    
  } catch (error) {
    console.log(`‚ùå Erreur: ${error.message}`);
  }
}

// Fonction principale de test
async function runTests() {
  console.log('üöÄ D√©marrage des tests du syst√®me d\'enrichissement\n');
  console.log('‚ö†Ô∏è  Assurez-vous que le serveur Next.js est d√©marr√© sur localhost:3000');
  console.log('‚ö†Ô∏è  Configurez votre cl√© API Google Places dans le fichier .env.local\n');
  
  await testUrlResolution();
  await testGooglePlacesProxy();
  await testEnrichmentSystem();
  
  console.log('\n‚úÖ Tests termin√©s !');
  console.log('\nüìã Prochaines √©tapes:');
  console.log('1. Configurez votre cl√© API Google Places');
  console.log('2. Testez l\'interface utilisateur dans le formulaire d\'√©tablissement');
  console.log('3. V√©rifiez la g√©n√©ration des tags "envie"');
  console.log('4. Testez la personnalisation des tags');
}

// Ex√©cuter les tests si le script est appel√© directement
if (typeof window === 'undefined') {
  runTests().catch(console.error);
}

module.exports = {
  testUrlResolution,
  testGooglePlacesProxy,
  testEnrichmentSystem,
  runTests
};
