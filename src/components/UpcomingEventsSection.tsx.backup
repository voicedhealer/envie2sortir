'use client';

import { useState, useEffect } from 'react';
import { Calendar, ChevronRight, Clock } from 'lucide-react';
import EventCardNew from './EventCardNew';
import ImageModal from './ImageModal';
import AddToCalendar from './AddToCalendar';
import { formatEventDate, isEventInProgress, isEventUpcoming } from '../lib/date-utils';
import { getEstablishmentInfo } from '../lib/calendar-utils';

interface Event {
  id: string;
  title: string;
  description: string | null;
  modality?: string | null;
  startDate: string;
  endDate?: string | null;
  price?: number | null;
  maxCapacity?: number | null;
  imageUrl?: string | null;
  location?: string | null;
}

interface UpcomingEventsSectionProps {
  establishmentSlug: string;
  maxEvents?: number;
}

export default function UpcomingEventsSection({ 
  establishmentSlug, 
  maxEvents = 3 
}: UpcomingEventsSectionProps) {
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [modalImage, setModalImage] = useState<{ url: string; title: string } | null>(null);
  const [establishmentInfo, setEstablishmentInfo] = useState<{
    name: string;
    address: string;
    city: string;
    postalCode: string;
  } | null>(null);

  useEffect(() => {
    const fetchUpcomingEvents = async () => {
      if (!establishmentSlug) {
        console.log('‚ö†Ô∏è Aucun slug d\'√©tablissement fourni');
        setEvents([]);
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        console.log('üîç Chargement des √©v√©nements pour:', establishmentSlug);
        const response = await fetch(`/api/etablissements/${establishmentSlug}/events`);
        
        if (!response.ok) {
          console.log('‚ùå Erreur API √©v√©nements:', response.status, response.statusText);
          if (response.status === 404) {
            // √âtablissement non trouv√© ou non disponible
            console.log('üìù √âtablissement non trouv√©, pas d\'√©v√©nements');
            setEvents([]);
            setLoading(false);
            return;
          }
          // Pour les autres erreurs, ne pas lancer d'exception, juste logger
          console.warn('‚ö†Ô∏è Erreur lors du chargement des √©v√©nements:', response.status);
          setEvents([]);
          setLoading(false);
          return;
        }

        const data = await response.json();
        console.log('üìä Donn√©es re√ßues:', data);
        const allEvents = data.events || [];
        console.log('üìÖ √âv√©nements trouv√©s:', allEvents.length);
        
        // üîß CORRECTION: Filtrer les √©v√©nements √† venir ET en cours (pas les √©v√©nements pass√©s)
        const upcomingEvents = allEvents
          .filter((event: Event) => isEventUpcoming(event.startDate) || isEventInProgress(event.startDate, event.endDate))
          .sort((a: Event, b: Event) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime())
          .slice(0, maxEvents);

        console.log('üéØ √âv√©nements √† venir:', upcomingEvents.length);
        setEvents(upcomingEvents);
      } catch (err) {
        console.error('Erreur lors du chargement des √©v√©nements:', err);
        setError(err instanceof Error ? err.message : 'Erreur inconnue');
        setEvents([]); // S'assurer que events est un tableau vide en cas d'erreur
      } finally {
        setLoading(false);
      }
    };

    fetchUpcomingEvents();
  }, [establishmentSlug, maxEvents]);

  // Charger les informations de l'√©tablissement pour enrichir les √©v√©nements
  useEffect(() => {
    const loadEstablishmentInfo = async () => {
      if (establishmentSlug) {
        const info = await getEstablishmentInfo(establishmentSlug);
        setEstablishmentInfo(info);
      }
    };

    loadEstablishmentInfo();
  }, [establishmentSlug]);

  // Ne pas afficher la section s'il n'y a pas d'√©v√©nements
  if (loading) {
    return (
      <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 space-y-4">
        <div className="animate-pulse">
          <div className="h-6 bg-gray-200 rounded w-1/3 mb-4"></div>
          <div className="space-y-3">
            <div className="h-24 bg-gray-200 rounded-lg"></div>
          </div>
        </div>
        <div className="text-center text-sm text-gray-500">
          Chargement des √©v√©nements...
        </div>
      </div>
    );
  }

  if (error) {
    console.error('Erreur lors du chargement des √©v√©nements:', error);
    return null;
  }

  // Toujours afficher la section, m√™me si vide
  if (events.length === 0) {
    console.log('Aucun √©v√©nement √† venir trouv√© - Affichage de la section vide');
  }

  console.log('√âv√©nements √† venir trouv√©s:', events.length, events);

  // D√©terminer le statut des √©v√©nements pour le titre dynamique
  const now = new Date();
  const hasInProgressEvents = events.some(event => {
    const eventStart = new Date(event.startDate);
    const eventEnd = event.endDate ? new Date(event.endDate) : eventStart;
    return eventStart <= now && eventEnd >= now;
  });
  const hasUpcomingEvents = events.some(event => new Date(event.startDate) > now);

  const getSectionTitle = () => {
    if (events.length === 0) {
      return '√âv√©nements √† venir';
    } else if (hasInProgressEvents && hasUpcomingEvents) {
      return '√âv√©nements en cours et √† venir';
    } else if (hasInProgressEvents) {
      return '√âv√©nements en cours';
    } else {
      return '√âv√©nements √† venir';
    }
  };

  const getSectionDescription = () => {
    if (events.length === 0) {
      return 'Aucun √©v√©nement programm√©';
    } else if (hasInProgressEvents && hasUpcomingEvents) {
      return `${events.length} √©v√©nement${events.length > 1 ? 's' : ''} en cours et programm√©${events.length > 1 ? 's' : ''}`;
    } else if (hasInProgressEvents) {
      return `${events.length} √©v√©nement${events.length > 1 ? 's' : ''} en cours`;
    } else {
      return `${events.length} √©v√©nement${events.length > 1 ? 's' : ''} programm√©${events.length > 1 ? 's' : ''}`;
    }
  };

  return (
    <div className="space-y-6">
      {/* Section √âv√©nements - Dynamique selon le statut */}
      <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-4 sm:p-6">
        <div className="flex items-center gap-3 pb-3 sm:pb-4 border-b border-gray-100">
          <div className="p-1.5 sm:p-2 bg-emerald-100 rounded-lg">
            <Calendar className="w-5 h-5 sm:w-6 sm:h-6 text-emerald-600" />
          </div>
          <div>
            <h2 className="text-xl sm:text-2xl font-bold text-gray-900">
              {getSectionTitle()}
            </h2>
            <p className="text-xs sm:text-sm text-gray-500">
              {getSectionDescription()}
            </p>
          </div>
        </div>

        {/* Afficher SEULEMENT le premier √©v√©nement (section hero) */}
        {events.length > 0 ? (
          <div className="space-y-3 sm:space-y-4">
            {events.slice(0, 1).map((event) => (
              <EventCardNew
                key={event.id}
                event={{
                  id: event.id,
                  title: event.title,
                  description: event.description || '',
                  startDate: event.startDate,
                  endDate: event.endDate || event.startDate,
                  price: event.price || 0,
                  location: event.location || '',
                  imageUrl: event.imageUrl || '',
                  modality: event.modality || '',
                  establishmentId: establishmentSlug // Utiliser le slug comme ID temporaire
                }}
                establishment={establishmentInfo}
              />
            ))}
            
          </div>
        ) : (
          /* Message quand aucun √©v√©nement */
          <div className="text-center py-8">
            <div className="p-4 bg-gray-50 rounded-lg">
              <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-3" />
              <p className="text-gray-600 font-medium mb-2">Aucun √©v√©nement programm√©</p>
              <p className="text-sm text-gray-500">
                Revenez bient√¥t pour d√©couvrir les prochains √©v√©nements de cet √©tablissement !
              </p>
            </div>
          </div>
        )}

      </div>

      {/* Modal d'image */}
      {modalImage && (
        <ImageModal
          isOpen={!!modalImage}
          onClose={() => setModalImage(null)}
          imageUrl={modalImage.url}
          alt={modalImage.title}
          title={modalImage.title}
        />
      )}
    </div>
  );
}
            {(() => {
              const mainEvent = events[0]; // Premier √©v√©nement (le plus proche)
              return (
                <div key={mainEvent.id} className="bg-gradient-to-br from-yellow-50 to-orange-50 rounded-lg border border-yellow-400 shadow-sm">
                  <div className="flex">
                    {/* Image √† gauche */}
                    <div className="w-32 sm:w-40 h-40 sm:h-48 flex-shrink-0">
                      {mainEvent.imageUrl ? (
                        <img
                          src={mainEvent.imageUrl}
                          alt={mainEvent.title}
                          className="w-full h-full object-cover cursor-pointer hover:opacity-90 transition-opacity duration-200 rounded-l-lg"
                          onClick={() => setModalImage({ url: mainEvent.imageUrl!, title: mainEvent.title })}
                        />
                      ) : (
                        <div className="w-full h-full bg-gradient-to-br from-emerald-100 to-green-100 flex items-center justify-center rounded-l-lg">
                          <Calendar className="w-8 h-8 text-emerald-600" />
                        </div>
                      )}
                    </div>

                    {/* Contenu √† droite */}
                    <div className="flex-1 p-4 flex flex-col justify-between">
                      <div className="flex items-start gap-3">
                        <div className="p-2 bg-emerald-100 rounded-lg">
                          <Calendar className="w-5 h-5 text-emerald-600" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <h3 className="text-lg font-bold text-gray-900">{mainEvent.title}</h3>
                            <span className="px-2 py-1 bg-amber-100 text-amber-800 text-xs font-semibold rounded-full">
                              √Ä venir
                            </span>
                          </div>
                          
                          {mainEvent.description && (
                            <p className="text-gray-700 mb-3 leading-relaxed">
                              {mainEvent.description}
                            </p>
                          )}

                          {mainEvent.modality && (
                            <p className="text-sm text-gray-600 mb-3 leading-relaxed italic">
                              {mainEvent.modality}
                            </p>
                          )}

                          <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600">
                            <div className="flex items-center gap-1">
                              <Clock className="w-4 h-4" />
                              <span className="font-medium">
                                D√©but: {formatEventDate(mainEvent.startDate)}
                              </span>
                            </div>
                            
                            {mainEvent.endDate && (
                              <div className="flex items-center gap-1">
                                <Clock className="w-4 h-4" />
                                <span className="font-medium">
                                  Fin: {formatEventDate(mainEvent.endDate)}
                                </span>
                              </div>
                            )}

                            {mainEvent.price && (
                              <div className="bg-amber-100 text-amber-800 px-3 py-1 rounded-full text-sm font-semibold">
                                {mainEvent.price}‚Ç¨
                              </div>
                            )}

                            {mainEvent.maxCapacity && (
                              <div className="text-gray-500">
                                Capacit√©: {mainEvent.maxCapacity} places
                              </div>
                            )}
                          </div>

                          {/* Bouton d'ajout au calendrier */}
                          <div className="mt-4 pt-4 border-t border-emerald-200 relative z-10">
                            <AddToCalendar
                              event={{
                                title: mainEvent.title,
                                description: mainEvent.description || undefined,
                                startDate: mainEvent.startDate,
                                endDate: mainEvent.endDate || undefined,
                                location: establishmentInfo ? 
                                  `${establishmentInfo.address}, ${establishmentInfo.postalCode} ${establishmentInfo.city}` : 
                                  undefined
                              }}
                              establishmentName={establishmentInfo?.name}
                              className="w-full sm:w-auto"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })()}
          </div>
        ) : (
          /* Message quand aucun √©v√©nement */
          <div className="text-center py-8">
            <div className="p-4 bg-gray-50 rounded-lg">
              <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-3" />
              <p className="text-gray-600 font-medium mb-2">Aucun √©v√©nement programm√©</p>
              <p className="text-sm text-gray-500">
                Revenez bient√¥t pour d√©couvrir les prochains √©v√©nements de cet √©tablissement !
              </p>
            </div>
          </div>
        )}

      </div>

      {/* Modal d'image */}
      {modalImage && (
        <ImageModal
          isOpen={!!modalImage}
          onClose={() => setModalImage(null)}
          imageUrl={modalImage.url}
          alt={modalImage.title}
          title={modalImage.title}
        />
      )}
    </div>
  );
}