import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import SmartEnrichmentStepV2 from '@/components/forms/SmartEnrichmentStepV2';

// Mock du service d'enrichissement
jest.mock('@/lib/smart-enrichment-service-v2', () => ({
  smartEnrichmentServiceV2: {
    analyzeEnrichmentGaps: jest.fn(),
    combineEnrichmentData: jest.fn(),
    validateEnrichmentConsistency: jest.fn()
  }
}));

// Mock du syst√®me d'enrichissement
jest.mock('@/lib/enrichment-system', () => ({
  enrichmentSystem: {
    enrichFromGoogle: jest.fn()
  }
}));

describe('SmartEnrichmentStepV2', () => {
  const mockProps = {
    onEnrichmentComplete: jest.fn(),
    onSkip: jest.fn(),
    isVisible: true,
    onEnrichmentDataChange: jest.fn(),
    establishmentType: 'restaurant'
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('devrait afficher le formulaire de saisie', () => {
    render(<SmartEnrichmentStepV2 {...mockProps} />);
    
    expect(screen.getByText('üöÄ Enrichissement intelligent')).toBeInTheDocument();
    expect(screen.getByLabelText('üîó Lien Google Maps de votre √©tablissement')).toBeInTheDocument();
    expect(screen.getByLabelText('üç¥ Lien TheFork (recommand√©)')).toBeInTheDocument();
    expect(screen.getByLabelText('üöó Lien Uber Eats (recommand√©)')).toBeInTheDocument();
  });

  it('devrait valider les URLs Google', async () => {
    render(<SmartEnrichmentStepV2 {...mockProps} />);
    
    const googleInput = screen.getByLabelText('üîó Lien Google Maps de votre √©tablissement');
    const button = screen.getByText('üöÄ Lancer l\'enrichissement intelligent');
    
    // URL invalide
    fireEvent.change(googleInput, { target: { value: 'https://invalid.com' } });
    fireEvent.click(button);
    
    await waitFor(() => {
      expect(screen.getByText('Veuillez saisir une URL Google Maps valide')).toBeInTheDocument();
    });
  });

  it('devrait valider les URLs TheFork', async () => {
    render(<SmartEnrichmentStepV2 {...mockProps} />);
    
    const googleInput = screen.getByLabelText('üîó Lien Google Maps de votre √©tablissement');
    const theForkInput = screen.getByLabelText('üç¥ Lien TheFork (recommand√©)');
    const button = screen.getByText('üöÄ Lancer l\'enrichissement intelligent');
    
    // URL Google valide mais TheFork invalide
    fireEvent.change(googleInput, { target: { value: 'https://maps.google.com/test' } });
    fireEvent.change(theForkInput, { target: { value: 'https://invalid.com' } });
    fireEvent.click(button);
    
    await waitFor(() => {
      expect(screen.getByText('Veuillez saisir une URL TheFork valide')).toBeInTheDocument();
    });
  });

  it('devrait valider les URLs Uber Eats', async () => {
    render(<SmartEnrichmentStepV2 {...mockProps} />);
    
    const googleInput = screen.getByLabelText('üîó Lien Google Maps de votre √©tablissement');
    const uberEatsInput = screen.getByLabelText('üöó Lien Uber Eats (recommand√©)');
    const button = screen.getByText('üöÄ Lancer l\'enrichissement intelligent');
    
    // URL Google valide mais Uber Eats invalide
    fireEvent.change(googleInput, { target: { value: 'https://maps.google.com/test' } });
    fireEvent.change(uberEatsInput, { target: { value: 'https://invalid.com' } });
    fireEvent.click(button);
    
    await waitFor(() => {
      expect(screen.getByText('Veuillez saisir une URL Uber Eats valide')).toBeInTheDocument();
    });
  });

  it('devrait afficher les donn√©es Google r√©cup√©r√©es apr√®s enrichissement', async () => {
    const { smartEnrichmentServiceV2 } = require('@/lib/smart-enrichment-service-v2');
    
    // Mock des donn√©es d'enrichissement
    const mockEnrichmentData = {
      name: 'DreamAway Dijon - R√©alit√© Virtuelle',
      establishmentType: 'other',
      googleRating: 5.0,
      servicesArray: ['√âquipements VR', 'Sessions priv√©es', 'WiFi gratuit'],
      paymentMethodsArray: ['Carte bancaire', 'Esp√®ces'],
      accessibilityInfo: ['Accessible PMR', 'Toilettes handicap√©es'],
      specialties: ['R√©alit√© Virtuelle', 'Escape Games'],
      atmosphere: ['Moderne', 'Technologique'],
      practicalInfo: ['√âquipements VR dernier cri'],
      populairePour: ['Familles', 'Groupes']
    };

    const mockSmartData = {
      establishmentType: 'vr_experience',
      enrichmentMetadata: {
        googleConfidence: 0.85,
        manualCompleteness: 0.5,
        totalSuggestions: 10,
        lastUpdated: new Date()
      }
    };

    const mockSuggestions = {
      recommended: [
        { category: 'services', value: 'Casques VR', confidence: 0.95, reason: 'Recommand√© pour vr_experience' },
        { category: 'payments', value: 'Tickets restaurant', confidence: 0.8, reason: 'Commodit√© obligatoire' }
      ],
      optional: [
        { category: 'services', value: 'Formation VR', confidence: 0.7, reason: 'Optionnel pour vr_experience' }
      ],
      alreadyFound: [],
      toVerify: []
    };

    smartEnrichmentServiceV2.analyzeEnrichmentGaps.mockReturnValue(mockSuggestions);
    smartEnrichmentServiceV2.combineEnrichmentData.mockReturnValue(mockSmartData);

    render(<SmartEnrichmentStepV2 {...mockProps} />);
    
    const googleInput = screen.getByLabelText('üîó Lien Google Maps de votre √©tablissement');
    const button = screen.getByText('üöÄ Lancer l\'enrichissement intelligent');
    
    fireEvent.change(googleInput, { target: { value: 'https://maps.google.com/test' } });
    fireEvent.click(button);
    
    await waitFor(() => {
      // V√©rifier l'affichage des m√©tadonn√©es
      expect(screen.getByText('DreamAway Dijon - R√©alit√© Virtuelle')).toBeInTheDocument();
      expect(screen.getByText('vr_experience')).toBeInTheDocument();
      expect(screen.getByText('‚úì D√©tect√©')).toBeInTheDocument();
      expect(screen.getByText('5/5')).toBeInTheDocument();
      expect(screen.getByText('85%')).toBeInTheDocument();
      
      // V√©rifier l'affichage des services r√©cup√©r√©s par Google
      expect(screen.getByText('Services r√©cup√©r√©s par Google')).toBeInTheDocument();
      expect(screen.getByText('√âquipements VR')).toBeInTheDocument();
      expect(screen.getByText('Sessions priv√©es')).toBeInTheDocument();
      expect(screen.getByText('WiFi gratuit')).toBeInTheDocument();
      
      // V√©rifier l'affichage des moyens de paiement r√©cup√©r√©s par Google
      expect(screen.getByText('Moyens de paiement r√©cup√©r√©s par Google')).toBeInTheDocument();
      expect(screen.getByText('Carte bancaire')).toBeInTheDocument();
      expect(screen.getByText('Esp√®ces')).toBeInTheDocument();
      
      // V√©rifier l'affichage de l'accessibilit√© r√©cup√©r√©e par Google
      expect(screen.getByText('Accessibilit√© r√©cup√©r√©e par Google')).toBeInTheDocument();
      expect(screen.getByText('Accessible PMR')).toBeInTheDocument();
      expect(screen.getByText('Toilettes handicap√©es')).toBeInTheDocument();
      
      // V√©rifier l'affichage des sp√©cialit√©s r√©cup√©r√©es par Google
      expect(screen.getByText('Sp√©cialit√©s r√©cup√©r√©es par Google')).toBeInTheDocument();
      expect(screen.getByText('R√©alit√© Virtuelle')).toBeInTheDocument();
      expect(screen.getByText('Escape Games')).toBeInTheDocument();
      
      // V√©rifier l'affichage de l'ambiance r√©cup√©r√©e par Google
      expect(screen.getByText('Ambiance r√©cup√©r√©e par Google')).toBeInTheDocument();
      expect(screen.getByText('Moderne')).toBeInTheDocument();
      expect(screen.getByText('Technologique')).toBeInTheDocument();
      
      // V√©rifier l'affichage des informations pratiques r√©cup√©r√©es par Google
      expect(screen.getByText('Informations pratiques r√©cup√©r√©es par Google')).toBeInTheDocument();
      expect(screen.getByText('√âquipements VR dernier cri')).toBeInTheDocument();
      
      // V√©rifier l'affichage de la client√®le r√©cup√©r√©e par Google
      expect(screen.getByText('Client√®le r√©cup√©r√©e par Google')).toBeInTheDocument();
      expect(screen.getByText('Familles')).toBeInTheDocument();
      expect(screen.getByText('Groupes')).toBeInTheDocument();
    }, { timeout: 3000 });
  });

  it('devrait afficher les suggestions intelligentes', async () => {
    const { smartEnrichmentServiceV2 } = require('@/lib/smart-enrichment-service-v2');
    
    const mockSuggestions = {
      recommended: [
        { category: 'services', value: 'Casques VR', confidence: 0.95, reason: 'Recommand√© pour vr_experience' },
        { category: 'payments', value: 'Tickets restaurant', confidence: 0.8, reason: 'Commodit√© obligatoire' }
      ],
      optional: [
        { category: 'services', value: 'Formation VR', confidence: 0.7, reason: 'Optionnel pour vr_experience' }
      ],
      alreadyFound: [],
      toVerify: []
    };

    smartEnrichmentServiceV2.analyzeEnrichmentGaps.mockReturnValue(mockSuggestions);
    smartEnrichmentServiceV2.combineEnrichmentData.mockReturnValue({
      establishmentType: 'vr_experience',
      enrichmentMetadata: { googleConfidence: 0.85, manualCompleteness: 0.5, totalSuggestions: 10, lastUpdated: new Date() }
    });

    render(<SmartEnrichmentStepV2 {...mockProps} />);
    
    const googleInput = screen.getByLabelText('üîó Lien Google Maps de votre √©tablissement');
    const button = screen.getByText('üöÄ Lancer l\'enrichissement intelligent');
    
    fireEvent.change(googleInput, { target: { value: 'https://maps.google.com/test' } });
    fireEvent.click(button);
    
    await waitFor(() => {
      // V√©rifier l'affichage des suggestions
      expect(screen.getByText('Suggestions personnalis√©es pour votre vr_experience')).toBeInTheDocument();
      expect(screen.getByText('üîµ Recommand√©')).toBeInTheDocument();
      expect(screen.getByText('‚ö™ Optionnel')).toBeInTheDocument();
      
      // V√©rifier les suggestions recommand√©es
      expect(screen.getByText('Casques VR')).toBeInTheDocument();
      expect(screen.getByText('Tickets restaurant')).toBeInTheDocument();
      
      // V√©rifier les suggestions optionnelles
      expect(screen.getByText('Formation VR')).toBeInTheDocument();
    }, { timeout: 3000 });
  });

  it('devrait permettre de s√©lectionner des suggestions', async () => {
    const { smartEnrichmentServiceV2 } = require('@/lib/smart-enrichment-service-v2');
    
    const mockSuggestions = {
      recommended: [
        { category: 'services', value: 'Casques VR', confidence: 0.95, reason: 'Recommand√© pour vr_experience' }
      ],
      optional: [],
      alreadyFound: [],
      toVerify: []
    };

    smartEnrichmentServiceV2.analyzeEnrichmentGaps.mockReturnValue(mockSuggestions);
    smartEnrichmentServiceV2.combineEnrichmentData.mockReturnValue({
      establishmentType: 'vr_experience',
      enrichmentMetadata: { googleConfidence: 0.85, manualCompleteness: 0.5, totalSuggestions: 10, lastUpdated: new Date() }
    });

    render(<SmartEnrichmentStepV2 {...mockProps} />);
    
    const googleInput = screen.getByLabelText('üîó Lien Google Maps de votre √©tablissement');
    const button = screen.getByText('üöÄ Lancer l\'enrichissement intelligent');
    
    fireEvent.change(googleInput, { target: { value: 'https://maps.google.com/test' } });
    fireEvent.click(button);
    
    await waitFor(() => {
      const checkbox = screen.getByLabelText('Casques VR');
      expect(checkbox).toBeInTheDocument();
      
      // S√©lectionner la suggestion
      fireEvent.click(checkbox);
      expect(checkbox).toBeChecked();
      
      // V√©rifier le compteur de suggestions s√©lectionn√©es
      expect(screen.getByText('1 suggestions s√©lectionn√©es')).toBeInTheDocument();
    }, { timeout: 3000 });
  });

  it('devrait continuer avec les donn√©es s√©lectionn√©es', async () => {
    const { smartEnrichmentServiceV2 } = require('@/lib/smart-enrichment-service-v2');
    
    const mockSuggestions = {
      recommended: [
        { category: 'services', value: 'Casques VR', confidence: 0.95, reason: 'Recommand√© pour vr_experience' }
      ],
      optional: [],
      alreadyFound: [],
      toVerify: []
    };

    smartEnrichmentServiceV2.analyzeEnrichmentGaps.mockReturnValue(mockSuggestions);
    smartEnrichmentServiceV2.combineEnrichmentData.mockReturnValue({
      establishmentType: 'vr_experience',
      enrichmentMetadata: { googleConfidence: 0.85, manualCompleteness: 0.5, totalSuggestions: 10, lastUpdated: new Date() }
    });
    smartEnrichmentServiceV2.validateEnrichmentConsistency.mockReturnValue({
      isValid: true,
      warnings: [],
      suggestions: []
    });

    render(<SmartEnrichmentStepV2 {...mockProps} />);
    
    const googleInput = screen.getByLabelText('üîó Lien Google Maps de votre √©tablissement');
    const button = screen.getByText('üöÄ Lancer l\'enrichissement intelligent');
    
    fireEvent.change(googleInput, { target: { value: 'https://maps.google.com/test' } });
    fireEvent.click(button);
    
    await waitFor(() => {
      const continueButton = screen.getByText('‚úÖ Continuer avec ces informations');
      fireEvent.click(continueButton);
      
      expect(mockProps.onEnrichmentComplete).toHaveBeenCalled();
    }, { timeout: 3000 });
  });
});
