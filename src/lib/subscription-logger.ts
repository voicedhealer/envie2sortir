import { prisma } from '@/lib/prisma';

export interface SubscriptionChangeLog {
  establishmentId: string;
  establishmentName: string;
  oldSubscription: string;
  newSubscription: string;
  changedBy: string;
  timestamp: Date;
  reason?: string;
}

export async function logSubscriptionChange(
  establishmentId: string,
  newSubscription: string,
  changedBy: string,
  reason?: string
) {
  try {
    // R√©cup√©rer les infos de l'√©tablissement
    const establishment = await prisma.establishment.findUnique({
      where: { id: establishmentId },
      select: { 
        name: true, 
        subscription: true,
        ownerId: true
      }
    });

    if (!establishment) {
      console.error('‚ùå √âtablissement introuvable pour le log de subscription:', establishmentId);
      return;
    }

    const logData: SubscriptionChangeLog = {
      establishmentId,
      establishmentName: establishment.name,
      oldSubscription: establishment.subscription,
      newSubscription,
      changedBy,
      timestamp: new Date(),
      reason
    };

    // Log dans la console
    console.log('üîÑ Changement de subscription:', {
      √©tablissement: establishment.name,
      ancien: establishment.subscription,
      nouveau: newSubscription,
      modifi√©_par: changedBy,
      raison: reason || 'Non sp√©cifi√©e',
      timestamp: logData.timestamp.toISOString()
    });

    // TODO: Sauvegarder en base de donn√©es si n√©cessaire
    // await prisma.subscriptionChangeLog.create({ data: logData });

  } catch (error) {
    console.error('‚ùå Erreur lors du logging de subscription:', error);
  }
}

export async function logUnauthorizedAccess(
  establishmentId: string,
  attemptedAction: string,
  userId: string,
  userEmail: string
) {
  console.log('üö® Tentative d\'acc√®s non autoris√©:', {
    √©tablissement: establishmentId,
    action: attemptedAction,
    utilisateur: `${userEmail} (${userId})`,
    timestamp: new Date().toISOString()
  });
}

export async function logPremiumFeatureUsage(
  establishmentId: string,
  feature: string,
  userId: string
) {
  console.log('‚≠ê Utilisation fonctionnalit√© premium:', {
    √©tablissement: establishmentId,
    fonctionnalit√©: feature,
    utilisateur: userId,
    timestamp: new Date().toISOString()
  });
}
