import fs from 'fs';
import path from 'path';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface CleanupResult {
  success: boolean;
  deletedCount: number;
  freedSpace: number;
  errors: string[];
  deletedFiles: string[];
}

/**
 * Nettoie les fichiers orphelins (non r√©f√©renc√©s dans la base de donn√©es)
 * S√âCURIS√â : Ne supprime que les fichiers non r√©f√©renc√©s en base
 */
export async function cleanupOrphanedFiles(): Promise<CleanupResult> {
  const result: CleanupResult = {
    success: true,
    deletedCount: 0,
    freedSpace: 0,
    errors: [],
    deletedFiles: []
  };

  try {
    console.log('üßπ D√©but du nettoyage des fichiers orphelins...');
    
    // 1. R√©cup√©rer tous les chemins d'images en base de donn√©es
    console.log('üìä R√©cup√©ration des images en base de donn√©es...');
    const dbImages = await prisma.image.findMany({
      select: { url: true }
    });
    
    const dbPaths = new Set(dbImages.map(img => img.url));
    console.log(`‚úÖ ${dbPaths.size} images r√©f√©renc√©es en base`);
    
    // 2. Scanner les fichiers physiques
    const uploadsDir = path.join(process.cwd(), 'public', 'uploads');
    
    if (!fs.existsSync(uploadsDir)) {
      console.log('‚ùå Dossier uploads introuvable');
      result.errors.push('Dossier uploads introuvable');
      return result;
    }
    
    const physicalFiles = [];
    const scanDirectory = (dir, relativePath = '') => {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const relativeItemPath = path.join(relativePath, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory()) {
          scanDirectory(fullPath, relativeItemPath);
        } else if (stat.isFile()) {
          const filePath = '/uploads/' + relativeItemPath.replace(/\\/g, '/');
          physicalFiles.push({
            path: filePath,
            fullPath: fullPath,
            size: stat.size
          });
        }
      }
    };
    
    scanDirectory(uploadsDir);
    console.log(`üìÅ ${physicalFiles.length} fichiers physiques trouv√©s`);
    
    // 3. Identifier et supprimer les fichiers orphelins
    const orphanedFiles = physicalFiles.filter(file => !dbPaths.has(file.path));
    
    console.log(`üóëÔ∏è  ${orphanedFiles.length} fichiers orphelins identifi√©s`);
    
    for (const file of orphanedFiles) {
      try {
        // Double v√©rification : s'assurer que le fichier n'est pas r√©f√©renc√©
        if (!dbPaths.has(file.path)) {
          await fs.promises.unlink(file.fullPath);
          result.deletedCount++;
          result.freedSpace += file.size;
          result.deletedFiles.push(file.path);
          console.log(`‚úÖ Supprim√©: ${file.path}`);
        }
      } catch (error) {
        const errorMsg = `Erreur suppression ${file.path}: ${error}`;
        console.error(`‚ùå ${errorMsg}`);
        result.errors.push(errorMsg);
      }
    }
    
    console.log(`‚úÖ Nettoyage termin√©: ${result.deletedCount} fichiers supprim√©s`);
    console.log(`üíæ Espace lib√©r√©: ${(result.freedSpace / 1024 / 1024).toFixed(2)} MB`);
    
    return result;
  } catch (error) {
    result.success = false;
    result.errors.push(`Erreur lors du nettoyage: ${error}`);
    console.error('‚ùå Erreur fatale:', error);
    return result;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Nettoie les anciens fichiers (plus vieux que X jours)
 */
export async function cleanupOldFiles(daysOld: number = 30): Promise<CleanupResult> {
  const result: CleanupResult = {
    success: true,
    deletedCount: 0,
    freedSpace: 0,
    errors: []
  };

  try {
    // Pour l'instant, on retourne un r√©sultat vide
    // TODO: Impl√©menter la logique de nettoyage des anciens fichiers
    console.log(`Nettoyage des fichiers plus anciens que ${daysOld} jours - fonctionnalit√© √† impl√©menter`);
    
    return result;
  } catch (error) {
    result.success = false;
    result.errors.push(`Erreur lors du nettoyage: ${error}`);
    return result;
  }
}
