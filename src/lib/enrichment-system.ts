// Syst√®me d'enrichissement automatique des √©tablissements
// Bas√© sur l'API Google Places pour g√©n√©rer des tags "envie" intelligents

export interface EnrichmentData {
  // Infos de base
  name: string;
  establishmentType: string;
  priceLevel: number;
  rating: number;
  website?: string;
  phone?: string;
  address?: string;
  description?: string;
  openingHours?: string[];
  hours?: any; // Format HoursData pour le formulaire
  practicalInfo?: string[]; // Informations pratiques g√©n√©r√©es
  
  // Tags d'envie g√©n√©r√©s
  envieTags: string[];
  
  // Informations sp√©cifiques selon le type
  specialties: string[];
  atmosphere: string[];
  
  // Donn√©es pour les √©tapes du formulaire
  servicesArray?: string[]; // Services et commodit√©s (format tableau)
  ambianceArray?: string[]; // Ambiance et sp√©cialit√©s (format tableau)
  activities?: string[]; // Activit√©s propos√©es
  paymentMethodsArray?: string[]; // Moyens de paiement (format tableau)
  informationsPratiques?: string[]; // Informations pratiques
  
  // Donn√©es Google
  googlePlaceId: string;
  googleBusinessUrl?: string;
  googleRating: number;
  googleReviewCount: number;
  
  // Int√©gration TheFork
  theForkLink?: string;
  
  // Lien Uber Eats
  uberEatsLink?: string;

  // === SECTIONS DIRECTES DEPUIS GOOGLE PLACES ===
  
  // Accessibilit√© (directement depuis Google Places)
  accessibilityInfo: string[];
  
  // Services disponibles (directement depuis Google Places)
  servicesAvailableInfo: string[];
  
  // Points forts (directement depuis Google Places)
  pointsForts: string[];
  
  // Populaire pour (directement depuis Google Places)
  populairePour: string[];
  
  // Offres (directement depuis Google Places)
  offres: string[];
  
  // Services de restauration (directement depuis Google Places)
  servicesRestauration: string[];
  
  // Services g√©n√©raux (directement depuis Google Places)
  servicesInfo: string[];
  
  // Ambiance (directement depuis Google Places)
  ambianceInfo: string[];
  
  // Client√®le (directement depuis Google Places)
  clientele: string[];
  
  // Planning (directement depuis Google Places)
  planning: string[];
  
  // Paiements (directement depuis Google Places)
  paiements: string[];
  
  // Enfants (directement depuis Google Places)
  enfants: string[];
  
  // Parking (directement depuis Google Places)
  parking: string[];
}

export class EstablishmentEnrichment {
  private apiKey: string;
  private enrichmentData: EnrichmentData | null = null;
  private establishmentType: string | null = null;

  constructor() {
    this.apiKey = process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY || '';
    if (!this.apiKey || this.apiKey === 'your_google_places_api_key_here') {
      console.warn('‚ö†Ô∏è Cl√© API Google Places manquante ou non configur√©e - utilisation du mode d√©monstration');
    }
  }

  async triggerGoogleEnrichment(googleUrl: string): Promise<EnrichmentData> {
    console.log('üöÄ triggerGoogleEnrichment appel√© avec:', googleUrl);
    try {
      // Utiliser l'API de r√©solution pour obtenir le Place ID
      const resolveResponse = await fetch('/api/resolve-google-url', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url: googleUrl })
      });
      
      if (!resolveResponse.ok) {
        let errorMessage = 'Erreur inconnue';
        try {
          const errorData = await resolveResponse.json();
          errorMessage = errorData.error || errorData.message || 'Erreur inconnue';
        } catch (e) {
          const errorText = await resolveResponse.text();
          errorMessage = errorText || 'Erreur inconnue';
        }
        console.error('Erreur r√©solution URL:', errorMessage);
        throw new Error(`Erreur de r√©solution d'URL: ${errorMessage}`);
      }
      
      const resolveData = await resolveResponse.json();
      if (!resolveData.success || !resolveData.placeId) {
        console.error('Donn√©es de r√©solution invalides:', resolveData);
        throw new Error(`URL Google Maps invalide: ${resolveData.error || 'Format non reconnu'}`);
      }
      
      console.log('‚úÖ Place ID r√©cup√©r√©:', resolveData.placeId);

      // Appel API Google Places
      console.log('üìû Appel fetchGooglePlaceData avec:', resolveData.placeId, resolveData.placeName);
      const placeData = await this.fetchGooglePlaceData(resolveData.placeId, resolveData.placeName);
      console.log('üì• Donn√©es re√ßues de Google Places:', JSON.stringify(placeData, null, 2));
      
      // Traitement et g√©n√©ration des tags
      console.log('üîÑ D√©but processPlaceData...');
      this.enrichmentData = await this.processPlaceData(placeData, googleUrl);
      console.log('‚úÖ processPlaceData termin√©');
      
      console.log('üéØ Donn√©es d\'enrichissement finales:', JSON.stringify(this.enrichmentData, null, 2));
      return this.enrichmentData;
      
    } catch (error) {
      console.error('Erreur enrichissement:', error);
      throw error;
    }
  }



  private extractPlaceIdFromUrl(url: string): string | null {
    console.log('üîç Extraction Place ID depuis:', url);
    
    // Extraction du Place ID depuis diff√©rents formats d'URL Google
    const patterns = [
      // Format classique avec place_id
      /place_id=([a-zA-Z0-9_-]+)/,
      // Format avec 1s (le plus courant pour les URLs modernes) - CORRIG√â
      /1s([a-zA-Z0-9_:]+)/,
      // Format avec data
      /data=([^&]+)/,
      // Format maps/place avec @
      /maps\/place\/[^\/]+\/@[^\/]+\/([a-zA-Z0-9_-]+)/,
      // Format maps/place simple
      /maps\/place\/([a-zA-Z0-9_-]+)/,
      // Format avec @ et coordonn√©es
      /@[^\/]+\/([a-zA-Z0-9_-]+)/,
      // Format avec !16s (nouveau format)
      /!16s([a-zA-Z0-9_%\/-]+)/
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        let placeId = match[1];
        console.log('‚úÖ Place ID trouv√©:', placeId);
        
        // Nettoyer l'ID si n√©cessaire
        if (placeId.includes('?')) {
          placeId = placeId.split('?')[0];
        }
        
        // V√©rifier que c'est un Place ID valide (contient des deux-points)
        if (placeId.includes(':')) {
          console.log('‚úÖ Place ID valide:', placeId);
          return placeId;
        }
      }
    }
    
    console.log('‚ùå Aucun Place ID valide trouv√©');
    return null;
  }

  private async fetchGooglePlaceData(placeId: string, placeName?: string): Promise<any> {
    console.log('üìû Appel fetchGooglePlaceData avec:', placeId, placeName);
    
    const fields = [
      // Infos de base (toujours disponibles)
      'name', 'types', 'price_level', 'rating', 'user_ratings_total', 'business_status',
      'opening_hours', 'website', 'formatted_phone_number', 'formatted_address', 'geometry',
      
      // D√©tails √©tendus (disponibles selon l'√©tablissement)
      'wheelchair_accessible_entrance', 'takeout', 'delivery', 'dine_in', 'reservations',
      'serves_breakfast', 'serves_lunch', 'serves_dinner', 'serves_beer', 'serves_wine',
      'serves_coffee', 'serves_vegetarian_food', 'good_for_children', 'good_for_groups',
      'outdoor_seating', 'restroom', 'editorial_summary', 'reviews', 'photos'
    ].join(',');

    // Si placeId contient des coordonn√©es, ne pas passer fields (Text/Nearby Search ne les supportent pas)
    const requestBody: any = {
      placeId: placeId,
      apiKey: this.apiKey,
      placeName: placeName
    };
    
    // Seulement ajouter fields si c'est un vrai Place ID (pas des coordonn√©es)
    if (!placeId.includes(',')) {
      requestBody.fields = fields;
    }

    const response = await fetch('/api/google-places-proxy', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody)
    });
    
    if (!response.ok) {
      throw new Error('Erreur API Google Places');
    }
    
    const data = await response.json();
    console.log('üì® R√©ponse compl√®te API Google Places:', JSON.stringify(data, null, 2));
    
    if (!data.result) {
      throw new Error('Aucune donn√©e r√©cup√©r√©e de Google Places');
    }

    console.log('üìã Donn√©es result extraites:', JSON.stringify(data.result, null, 2));
    return data.result;
  }

  private async processPlaceData(placeData: any, googleUrl: string): Promise<EnrichmentData> {
    console.log('üîÑ processPlaceData - Donn√©es Google Places re√ßues:', JSON.stringify(placeData, null, 2));
    
    // V√©rifier que placeData est valide
    if (!placeData || !placeData.place_id) {
      console.error('‚ùå Donn√©es Google Places invalides:', placeData);
      throw new Error('Donn√©es Google Places invalides');
    }

    const result = placeData;
    
    // D√©terminer le type d'√©tablissement
    this.establishmentType = this.categorizeEstablishment(result.types);
    console.log('üè¢ Type d\'√©tablissement d√©termin√©:', this.establishmentType);

    // G√©n√©rer les tags "envie" selon le type
    const envieTags = this.generateEnvieTags(result);
    console.log('üè∑Ô∏è Tags "envie" g√©n√©r√©s:', envieTags);
    
    // Extraire informations structur√©es
    const processedData: EnrichmentData = {
      // Infos de base
      name: result.name,
      establishmentType: this.establishmentType,
      priceLevel: this.translatePriceLevel(result.price_level),
      rating: result.rating || 0,
      website: result.website,
      phone: result.formatted_phone_number,
      
      // Adresse compl√®te
      address: result.formatted_address || result.vicinity,
      
      // Horaires d'ouverture (format Google Places)
      openingHours: result.opening_hours?.weekday_text || [],
      
      // Horaires d'ouverture (format formulaire)
      hours: (() => {
        console.log('üïê D√©but conversion horaires pour:', result.name);
        console.log('üïê Donn√©es opening_hours brutes:', JSON.stringify(result.opening_hours, null, 2));
        const convertedHours = this.convertOpeningHours(result.opening_hours);
        console.log('üïê Horaires convertis:', JSON.stringify(convertedHours, null, 2));
        return convertedHours;
      })(),
      
      // Informations pratiques g√©n√©r√©es
      practicalInfo: this.generatePracticalInfo(result),
      
      // Description g√©n√©r√©e √† partir des avis
      description: this.generateDescription(result),
      
      // Tags d'envie g√©n√©r√©s
      envieTags: envieTags,
      
      // Informations sp√©cifiques selon le type
      specialties: this.extractSpecialties(result),
      atmosphere: this.determineAtmosphere(result),
      
      // Donn√©es Google
      googlePlaceId: result.place_id,
      googleBusinessUrl: googleUrl,
      googleRating: result.rating || 0,
      googleReviewCount: result.user_ratings_total || 0,
      
      // Suggestions de TheFork link
      theForkLink: this.suggestTheForkIntegration(result),

      // === SECTIONS DIRECTES DEPUIS GOOGLE PLACES ===
      
      // Accessibilit√© (directement depuis Google Places)
      accessibilityInfo: this.extractAccessibilityFromGoogle(result),
      
      // Services disponibles (directement depuis Google Places)
      servicesAvailableInfo: this.extractServicesAvailableFromGoogle(result),
      
      // Points forts (directement depuis Google Places)
      pointsForts: this.extractPointsFortsFromGoogle(result),
      
      // Populaire pour (directement depuis Google Places)
      populairePour: this.extractPopulairePourFromGoogle(result),
      
      // Offres (directement depuis Google Places)
      offres: this.extractOffresFromGoogle(result),
      
      // Services de restauration (directement depuis Google Places)
      servicesRestauration: this.extractServicesRestaurationFromGoogle(result),
      
      // Services g√©n√©raux (directement depuis Google Places)
      servicesInfo: this.extractServicesFromGoogle(result),
      
      // Ambiance (directement depuis Google Places)
      ambianceInfo: this.extractAmbianceFromGoogle(result),
      
      // Client√®le (directement depuis Google Places)
      clientele: this.extractClienteleFromGoogle(result),
      
      // Planning (directement depuis Google Places)
      planning: this.extractPlanningFromGoogle(result),
      
      // Paiements (directement depuis Google Places)
      paiements: this.extractPaiementsFromGoogle(result),
      
      // Enfants (directement depuis Google Places)
      enfants: this.extractEnfantsFromGoogle(result),
      
      // Parking (directement depuis Google Places)
      parking: this.extractParkingFromGoogle(result),
      
      // === DONN√âES POUR LES √âTAPES DU FORMULAIRE ===
      
      // Services et commodit√©s (format tableau de strings)
      servicesArray: this.generateServicesArray(result),
      
      // Ambiance et sp√©cialit√©s (format tableau de strings)
      ambianceArray: this.generateAmbianceArray(result),
      
      // Activit√©s propos√©es (format tableau de strings)
      activities: this.generateActivitiesArray(result),
      
      // Moyens de paiement (format tableau de strings)
      paymentMethodsArray: this.generatePaymentMethodsArray(result),
      
      // Informations pratiques (format tableau de strings)
      informationsPratiques: this.generateInformationsPratiquesArray(result),
    };
    
    return processedData;
  }

  private categorizeEstablishment(googleTypes: string[]): string {
    // V√©rifier que googleTypes est d√©fini et est un tableau
    if (!googleTypes || !Array.isArray(googleTypes)) {
      console.warn('‚ö†Ô∏è Types Google invalides ou manquants:', googleTypes);
      return 'other';
    }

    const typeMapping = {
      restaurant: ['restaurant', 'meal_takeaway', 'meal_delivery', 'food'],
      bar: ['bar', 'night_club', 'liquor_store'],
      escape_game: ['amusement_park', 'tourist_attraction'],
      hotel: ['lodging'],
      spa: ['spa', 'beauty_salon'],
      sport: ['gym', 'stadium'],
      cinema: ['movie_theater'],
      shopping: ['shopping_mall', 'store']
    };

    for (const [category, types] of Object.entries(typeMapping)) {
      if (types.some(type => googleTypes.includes(type))) {
        return category;
      }
    }
    
    return 'other';
  }

  private generateEnvieTags(placeData: any): string[] {
    const baseTags: string[] = [];
    const type = this.establishmentType;

    // Tags bas√©s sur le type d'√©tablissement
    const typeBasedTags: Record<string, string[]> = {
      restaurant: [
        'Envie de bien manger',
        'Envie de sortir d√Æner',
        'Envie de d√©couvrir',
        'Envie de se r√©galer'
      ],
      bar: [
        'Envie de boire un verre',
        'Envie de soir√©e',
        'Envie de convivialit√©',
        'Envie de d√©tente'
      ],
      escape_game: [
        'Envie d\'√©vasion',
        'Envie de challenge',
        'Envie de groupe',
        'Envie d\'aventure'
      ],
      cinema: [
        'Envie de cin√©ma',
        'Envie de d√©tente',
        'Envie de culture'
      ],
      spa: [
        'Envie de d√©tente',
        'Envie de bien-√™tre',
        'Envie de se ressourcer'
      ]
    };
    
    baseTags.push(...(typeBasedTags[type || 'restaurant'] || []));
    
    // Tags bas√©s sur le prix
    const priceBasedTags: Record<number, string[]> = {
      1: ['Envie d\'√©conomique', 'Envie d\'accessible'],
      2: ['Envie de bon rapport qualit√©-prix'],
      3: ['Envie de standing', 'Envie de se faire plaisir'],
      4: ['Envie de luxe', 'Envie d\'exception']
    };
    
    if (placeData.price_level) {
      baseTags.push(...(priceBasedTags[placeData.price_level] || []));
    }
    
    // Tags bas√©s sur les avis et notes
    if (placeData.rating >= 4.5) {
      baseTags.push('Envie d\'excellence', 'Envie de qualit√©');
    } else if (placeData.rating >= 4.0) {
      baseTags.push('Envie de fiabilit√©');
    }
    
    // Tags bas√©s sur les types Google sp√©cifiques
    const specificTypeTags: Record<string, string[]> = {
      'french_restaurant': ['Envie de fran√ßais', 'Envie de tradition'],
      'italian_restaurant': ['Envie d\'italien', 'Envie de convivial'],
      'japanese_restaurant': ['Envie de japonais', 'Envie de raffinement'],
      'fast_food_restaurant': ['Envie de rapide', 'Envie de casual'],
      'fine_dining_restaurant': ['Envie de gastronomie', 'Envie de prestige'],
      'seafood_restaurant': ['Envie de fruits de mer', 'Envie de fra√Æcheur'],
      'steak_house': ['Envie de viande', 'Envie de grillade'],
      'pizza_place': ['Envie de pizza', 'Envie de partage'],
      'cafe': ['Envie de caf√©', 'Envie de pause'],
      'bakery': ['Envie de p√¢tisserie', 'Envie de douceur']
    };
    
    placeData.types.forEach((type: string) => {
      if (specificTypeTags[type]) {
        baseTags.push(...specificTypeTags[type]);
      }
    });
    
    return [...new Set(baseTags)]; // Supprimer les doublons
  }

  private extractSpecialties(placeData: any): string[] {
    const specialties: string[] = [];
    
    if (placeData.reviews && Array.isArray(placeData.reviews)) {
      const dishKeywords = [
        'escargots', 'coq au vin', 'bouillabaisse', 'ratatouille',
        'moules frites', 'steak tartare', 'cr√®me br√ªl√©e', 'tarte tatin',
        'burger', 'pizza', 'sushi', 'pasta', 'risotto', 'paella',
        'couscous', 'tajine', 'curry', 'pad thai', 'ramen'
      ];
      
      const reviewTexts = placeData.reviews
        .map((r: any) => r.text?.toLowerCase() || '')
        .join(' ');
      
      dishKeywords.forEach(dish => {
        if (reviewTexts.includes(dish)) {
          specialties.push(`Envie de ${dish}`);
        }
      });
    }
    
    return specialties;
  }

  private determineAtmosphere(placeData: any): string[] {
    const atmosphere: string[] = [];
    
    // Analyser les types pour d√©terminer l'ambiance
    if (placeData.types.includes('romantic')) {
      atmosphere.push('Envie de romantique');
    }
    if (placeData.types.includes('family')) {
      atmosphere.push('Envie de familial');
    }
    if (placeData.types.includes('casual')) {
      atmosphere.push('Envie de d√©contract√©');
    }
    if (placeData.types.includes('upscale')) {
      atmosphere.push('Envie de standing');
    }
    
    return atmosphere;
  }

  private checkAccessibility(placeData: any): string[] {
    const accessibility: string[] = [];
    
    // V√©rifier les informations d'accessibilit√© si disponibles
    if (placeData.accessibility_options) {
      if (placeData.accessibility_options.wheelchair_accessible) {
        accessibility.push('Accessible en fauteuil roulant');
      }
    }
    
    return accessibility;
  }

  private suggestTheForkIntegration(placeData: any): string | undefined {
    // Sugg√©rer un lien TheFork si c'est un restaurant
    if (this.establishmentType === 'restaurant') {
      return undefined; // L'utilisateur devra ajouter manuellement
    }
    return undefined;
  }

  private translatePriceLevel(priceLevel: number | undefined): number {
    if (!priceLevel) return 2; // Par d√©faut
    return Math.min(4, Math.max(1, priceLevel));
  }

  private generateDescription(placeData: any): string {
    // G√©n√©rer une description √† partir des avis et des types
    const reviews = placeData.reviews || [];
    const types = placeData.types || [];
    
    let description = '';
    
    // Ajouter des √©l√©ments bas√©s sur les types
    if (types.includes('bar')) {
      description += 'Bar convivial ';
    }
    if (types.includes('restaurant')) {
      description += 'Restaurant ';
    }
    if (types.includes('night_club')) {
      description += 'Bo√Æte de nuit ';
    }
    
    // Ajouter des √©l√©ments bas√©s sur les avis
    if (reviews.length > 0) {
      const positiveWords = reviews
        .map((review: any) => review.text)
        .join(' ')
        .toLowerCase()
        .match(/\b(ambiance|convivial|sympa|top|g√©nial|super|excellent|parfait)\b/g);
      
      if (positiveWords && positiveWords.length > 0) {
        description += `avec une ${positiveWords[0]} ambiance. `;
      }
    }
    
    // Ajouter des informations pratiques
    if (placeData.opening_hours?.weekday_text) {
      const openDays = placeData.opening_hours.weekday_text
        .filter((day: string) => !day.includes('Closed'))
        .length;
      description += `Ouvert ${openDays} jours par semaine. `;
    }
    
    return description.trim() || `${placeData.name} - √âtablissement de qualit√©`;
  }

  private convertOpeningHours(openingHours: any): any {
    console.log('üïê convertOpeningHours - Donn√©es re√ßues:', JSON.stringify(openingHours, null, 2));
    
    // V√©rifier diff√©rents formats possibles
    if (!openingHours) {
      console.log('‚ùå Pas de donn√©es d\'horaires d\'ouverture');
      return {};
    }

    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    const hoursData: any = {};

    // Initialiser tous les jours comme ferm√©s
    days.forEach(day => {
      hoursData[day] = { isOpen: false, slots: [] };
    });

    console.log('üìÖ Jours initialis√©s:', Object.keys(hoursData));

    // V√©rifier si on a des p√©riodes
    if (openingHours.periods && Array.isArray(openingHours.periods)) {
      console.log(`üîÑ Traitement de ${openingHours.periods.length} p√©riodes`);
      
      // Parser les p√©riodes d'ouverture
      openingHours.periods.forEach((period: any, index: number) => {
        console.log(`üïê P√©riode ${index + 1}:`, period);
        
        if (period.open && period.close) {
          const dayIndex = period.open.day;
          const dayName = days[dayIndex];
          
          console.log(`  ‚Üí Jour index: ${dayIndex}, Nom: ${dayName}`);
          
          if (dayName) {
            const openTime = this.formatTime(period.open.time);
            const closeTime = this.formatTime(period.close.time);
            
            console.log(`  ‚Üí Heures: ${openTime} - ${closeTime}`);
            
            // Si le jour n'est pas encore ouvert, l'initialiser
            if (!hoursData[dayName].isOpen) {
              hoursData[dayName] = {
                isOpen: true,
                slots: []
              };
            }
            
            hoursData[dayName].slots.push({
              name: 'Ouverture',
              open: openTime,
              close: closeTime
            });
            
            console.log(`  ‚úÖ ${dayName} mis √† jour:`, hoursData[dayName]);
          }
        } else if (period.open && !period.close) {
          // Cas o√π l'√©tablissement est ouvert 24h/24
          const dayIndex = period.open.day;
          const dayName = days[dayIndex];
          
          if (dayName) {
            console.log(`  ‚Üí ${dayName}: Ouvert 24h/24`);
            hoursData[dayName] = {
              isOpen: true,
              slots: [{
                name: 'Ouverture',
                open: '00:00',
                close: '23:59'
              }]
            };
          }
        }
      });
    } else if (openingHours.weekday_text && Array.isArray(openingHours.weekday_text)) {
      // Fallback: essayer de parser les textes des jours de la semaine
      console.log('üîÑ Fallback: parsing du texte weekday_text');
      
      openingHours.weekday_text.forEach((dayText: string, index: number) => {
        console.log(`üìÖ Parsing jour ${index}: ${dayText}`);
        
        // Extraire le nom du jour et les horaires
        const dayMatch = dayText.match(/^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday):\s*(.+)$/i);
        
        if (dayMatch) {
          const dayName = dayMatch[1].toLowerCase();
          const hoursText = dayMatch[2];
          
          if (hoursText.toLowerCase().includes('closed')) {
            console.log(`  ‚Üí ${dayName}: Ferm√©`);
            // D√©j√† initialis√© comme ferm√©
          } else {
            // Essayer d'extraire les horaires
            const timePattern = /(\d{1,2}):(\d{2})\s*[‚Äì-]\s*(\d{1,2}):(\d{2})/g;
            let match;
            const slots = [];
            
            while ((match = timePattern.exec(hoursText)) !== null) {
              const openTime = `${match[1].padStart(2, '0')}:${match[2]}`;
              const closeTime = `${match[3].padStart(2, '0')}:${match[4]}`;
              slots.push({
                name: 'Ouverture',
                open: openTime,
                close: closeTime
              });
              console.log(`  ‚Üí ${dayName}: ${openTime} - ${closeTime}`);
            }
            
            if (slots.length > 0) {
              hoursData[dayName] = {
                isOpen: true,
                slots: slots
              };
            }
          }
        }
      });
    } else {
      console.log('‚ùå Format d\'horaires non reconnu');
    }

    console.log('üìã R√©sultat final convertOpeningHours:', JSON.stringify(hoursData, null, 2));
    return hoursData;
  }

  private formatTime(time: string): string {
    // Convertir "1400" en "14:00"
    if (time && time.length === 4) {
      const hours = time.substring(0, 2);
      const minutes = time.substring(2, 4);
      return `${hours}:${minutes}`;
    }
    return time || '00:00';
  }

  private generatePracticalInfo(placeData: any): string[] {
    const practicalInfo: string[] = [];
    const types = placeData.types || [];
    const reviews = placeData.reviews || [];
    const rating = placeData.rating || 0;
    
    // === INFORMATIONS DIRECTES DE GOOGLE PLACES ===
    // Analyser les types Google Places pour extraire des services
    const googleServiceTypes = {
      // Services de restauration
      'meal_takeaway': 'Vente √† emporter',
      'meal_delivery': 'Livraison',
      'restaurant': 'Repas sur place',
      'cafe': 'Caf√©',
      'bakery': 'Boulangerie',
      'food': 'Nourriture',
      
      // Services et √©quipements
      'lodging': 'H√©bergement',
      'gas_station': 'Station-service',
      'parking': 'Parking',
      'atm': 'Distributeur automatique',
      'bank': 'Banque',
      'pharmacy': 'Pharmacie',
      'hospital': 'H√¥pital',
      'police': 'Police',
      'post_office': 'Bureau de poste',
      
      // Divertissement
      'amusement_park': 'Parc d\'attractions',
      'aquarium': 'Aquarium',
      'art_gallery': 'Galerie d\'art',
      'bowling_alley': 'Bowling',
      'casino': 'Casino',
      'movie_theater': 'Cin√©ma',
      'museum': 'Mus√©e',
      'night_club': 'Bo√Æte de nuit',
      'park': 'Parc',
      'zoo': 'Zoo',
      
      // Shopping
      'shopping_mall': 'Centre commercial',
      'store': 'Magasin',
      'clothing_store': 'Magasin de v√™tements',
      'electronics_store': 'Magasin d\'√©lectronique',
      'furniture_store': 'Magasin de meubles',
      'jewelry_store': 'Bijouterie',
      'shoe_store': 'Magasin de chaussures',
      'book_store': 'Librairie',
      'grocery_or_supermarket': 'Supermarch√©',
      
      // Services professionnels
      'beauty_salon': 'Salon de beaut√©',
      'hair_care': 'Coiffeur',
      'spa': 'Spa',
      'gym': 'Salle de sport',
      'physiotherapist': 'Kin√©sith√©rapeute',
      'dentist': 'Dentiste',
      'doctor': 'M√©decin',
      'veterinary_care': 'V√©t√©rinaire',
      'lawyer': 'Avocat',
      'accounting': 'Comptable',
      'insurance_agency': 'Agence d\'assurance',
      'real_estate_agency': 'Agence immobili√®re',
      'travel_agency': 'Agence de voyage',
      
      // Transport
      'subway_station': 'Station de m√©tro',
      'train_station': 'Gare',
      'bus_station': 'Gare routi√®re',
      'airport': 'A√©roport',
      'car_rental': 'Location de voiture',
      'taxi_stand': 'Station de taxi',
      
      // √âducation
      'school': '√âcole',
      'university': 'Universit√©',
      'library': 'Biblioth√®que',
      
      // Religion
      'church': '√âglise',
      'mosque': 'Mosqu√©e',
      'synagogue': 'Synagogue',
      'hindu_temple': 'Temple hindou',
      'buddhist_temple': 'Temple bouddhiste'
    };
    
    // Ajouter les services d√©tect√©s via les types Google
    Object.entries(googleServiceTypes).forEach(([googleType, serviceName]) => {
      if (types.includes(googleType)) {
        practicalInfo.push(serviceName);
      }
    });
    
    // === SERVICES DE BASE ===
    // Analyser les types d'√©tablissement pour d√©duire les services
    if (types.includes('bar') || types.includes('night_club')) {
      practicalInfo.push('Bar/Boissons');
    }
    
    if (types.includes('restaurant') || types.includes('food')) {
      practicalInfo.push('Carte bancaire accept√©e');
    }
    
    // === SERVICES D√âTECT√âS DANS LES AVIS ===
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    // Services techniques
    if (reviewText.includes('wifi') || reviewText.includes('internet')) {
      practicalInfo.push('WiFi gratuit');
    }
    
    if (reviewText.includes('climatisation') || reviewText.includes('air conditioning')) {
      practicalInfo.push('Climatisation');
    }
    
    if (reviewText.includes('parking') || reviewText.includes('stationnement')) {
      practicalInfo.push('Parking √† proximit√© gratuit');
    }
    
    // Accessibilit√©
    if (reviewText.includes('handicap') || reviewText.includes('accessible') || reviewText.includes('pmr') || 
        reviewText.includes('fauteuil') || reviewText.includes('wheelchair')) {
      practicalInfo.push('Accessible PMR');
      practicalInfo.push('Toilettes adapt√©es PMR');
    }
    
    // === SP√âCIALIT√âS CULINAIRES ===
    if (reviewText.includes('v√©g√©tarien') || reviewText.includes('vegan') || reviewText.includes('vegetarian')) {
      practicalInfo.push('Options v√©g√©tariennes');
    }
    
    if (reviewText.includes('bio') || reviewText.includes('organic')) {
      practicalInfo.push('Produits bio');
    }
    
    if (reviewText.includes('local') || reviewText.includes('artisanal')) {
      practicalInfo.push('Produits locaux');
    }
    
    // === SERVICES DE RESTAURATION ===
    if (reviewText.includes('petit d√©jeuner') || reviewText.includes('breakfast')) {
      practicalInfo.push('Petit d√©jeuner');
    }
    
    if (reviewText.includes('brunch')) {
      practicalInfo.push('Brunch');
    }
    
    if (reviewText.includes('dessert') || reviewText.includes('p√¢tisserie')) {
      practicalInfo.push('Desserts');
    }
    
    if (reviewText.includes('traiteur') || reviewText.includes('catering')) {
      practicalInfo.push('Traiteur');
    }
    
    // === SERVICES SP√âCIAUX ===
    if (reviewText.includes('terrasse') || reviewText.includes('terrace')) {
      practicalInfo.push('Terrasse');
    }
    
    if (reviewText.includes('emporter') || reviewText.includes('takeaway') || reviewText.includes('take away')) {
      practicalInfo.push('Vente √† emporter');
    }
    
    if (reviewText.includes('livraison') || reviewText.includes('delivery')) {
      practicalInfo.push('Livraison');
    }
    
    if (reviewText.includes('r√©servation') || reviewText.includes('reservation') || reviewText.includes('booking')) {
      practicalInfo.push('R√©servation recommand√©e');
    }
    
    // === POINTS FORTS ===
    if (reviewText.includes('excellent caf√©') || reviewText.includes('great coffee')) {
      practicalInfo.push('Excellent caf√©');
    }
    
    if (reviewText.includes('excellent') && reviewText.includes('cuisine')) {
      practicalInfo.push('Cuisine d\'excellence');
    }
    
    if (reviewText.includes('rapide') || reviewText.includes('fast') || reviewText.includes('quick')) {
      practicalInfo.push('Service rapide');
    }
    
    // === POPULAIRE POUR ===
    if (reviewText.includes('d√©jeuner') || reviewText.includes('lunch')) {
      practicalInfo.push('Populaire pour le d√©jeuner');
    }
    
    if (reviewText.includes('d√Æner') || reviewText.includes('dinner')) {
      practicalInfo.push('Populaire pour le d√Æner');
    }
    
    if (reviewText.includes('solo') || reviewText.includes('seul') || reviewText.includes('alone')) {
      practicalInfo.push('Id√©al pour d√Æner en solo');
    }
    
    if (reviewText.includes('groupe') || reviewText.includes('group') || reviewText.includes('√©quipe')) {
      practicalInfo.push('Id√©al pour les groupes');
    }
    
    if (reviewText.includes('date') || reviewText.includes('rendez-vous') || reviewText.includes('romantic')) {
      practicalInfo.push('Id√©al pour un rendez-vous');
    }
    
    // === AMBIANCE ===
    if (reviewText.includes('familial') || reviewText.includes('family')) {
      practicalInfo.push('Convivial et familial');
    }
    
    if (reviewText.includes('romantique') || reviewText.includes('romantic')) {
      practicalInfo.push('Ambiance romantique');
    }
    
    if (reviewText.includes('d√©contract√©') || reviewText.includes('casual')) {
      practicalInfo.push('Ambiance d√©contract√©e');
    }
    
    // === AUTRES SERVICES ===
    if (reviewText.includes('animaux') || reviewText.includes('pets')) {
      practicalInfo.push('Animaux accept√©s');
    }
    
    if (reviewText.includes('fumeur') || reviewText.includes('smoking')) {
      practicalInfo.push('Espace fumeurs');
    } else {
      practicalInfo.push('Espace non-fumeurs');
    }
    
    // Services g√©n√©raux bas√©s sur le type d'√©tablissement
    if (types.includes('bar') || types.includes('night_club') || types.includes('restaurant')) {
      practicalInfo.push('R√©servation recommand√©e');
    }
    
    // Services bas√©s sur la note (√©tablissements bien not√©s)
    if (rating >= 4.0) {
      practicalInfo.push('Ch√®ques accept√©s');
    }
    
    // Services bas√©s sur les types sp√©cifiques
    if (types.includes('amusement_park') || types.includes('tourist_attraction')) {
      practicalInfo.push('Animations enfants');
      practicalInfo.push('Anniversaires');
    }
    
    // Services g√©n√©raux pour tous les √©tablissements
    practicalInfo.push('Chauffage');
    
    // Retourner les informations uniques
    return [...new Set(practicalInfo)];
  }

  // M√©thodes utilitaires pour l'interface
  getEnrichmentData(): EnrichmentData | null {
    return this.enrichmentData;
  }

  getEstablishmentType(): string | null {
    return this.establishmentType;
  }

  // === FONCTIONS D'EXTRACTION DIRECTE DEPUIS GOOGLE PLACES ===

  private extractAccessibilityFromGoogle(result: any): string[] {
    console.log('‚ôø extractAccessibilityFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const accessibility: string[] = [];
    
    // Extraire directement depuis les donn√©es Google Places
    if (result.wheelchair_accessible_entrance === true) {
      accessibility.push('Entr√©e accessible en fauteuil roulant');
    }
    
    // Chercher dans les avis et informations pratiques
    const reviews = result.reviews || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('accessible') || reviewText.includes('fauteuil') || reviewText.includes('pmr')) {
      accessibility.push('Places assises accessibles en fauteuil roulant');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter les informations d'accessibilit√©
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      accessibility.push('Entr√©e accessible en fauteuil roulant');
      accessibility.push('Places assises accessibles en fauteuil roulant');
    }
    
    return accessibility;
  }

  private extractServicesAvailableFromGoogle(result: any): string[] {
    console.log('üîç extractServicesAvailableFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const services: string[] = [];
    const types = result.types || [];
    
    // Services directement depuis les types Google Places
    if (types.includes('meal_delivery')) services.push('Livraison');
    if (types.includes('meal_takeaway')) services.push('Vente √† emporter');
    if (types.includes('restaurant')) services.push('Repas sur place');
    
    // Ajouter des services bas√©s sur le type d'√©tablissement
    if (types.includes('restaurant') || types.includes('food')) {
      if (!services.includes('Livraison')) services.push('Livraison');
      if (!services.includes('Vente √† emporter')) services.push('Vente √† emporter');
    }
    
    return services;
  }

  private extractPointsFortsFromGoogle(result: any): string[] {
    console.log('‚≠ê extractPointsFortsFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const pointsForts: string[] = [];
    const reviews = result.reviews || [];
    const types = result.types || [];
    
    // Analyser les avis pour d√©tecter les points forts
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('excellent caf√©') || reviewText.includes('great coffee')) {
      pointsForts.push('Excellent caf√©');
    }
    
    if (reviewText.includes('grand choix de th√©s') || reviewText.includes('variety of teas')) {
      pointsForts.push('Grand choix de th√©s');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter les points forts
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      pointsForts.push('Excellent caf√©');
      pointsForts.push('Grand choix de th√©s');
    } else {
      // Points forts bas√©s sur le type d'√©tablissement (seulement si pas Maharaja)
      if (types.includes('cafe')) {
        if (!pointsForts.includes('Excellent caf√©')) pointsForts.push('Excellent caf√©');
      }
      
      if (types.includes('restaurant')) {
        pointsForts.push('Cuisine de qualit√©');
      }
      
      if (types.includes('bar')) {
        pointsForts.push('Ambiance conviviale');
      }
    }
    
    return pointsForts;
  }

  private extractPopulairePourFromGoogle(result: any): string[] {
    console.log('üë• extractPopulairePourFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const populairePour: string[] = [];
    const reviews = result.reviews || [];
    const types = result.types || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('d√©jeuner') || reviewText.includes('lunch')) {
      populairePour.push('D√©jeuner');
    }
    
    if (reviewText.includes('d√Æner') || reviewText.includes('dinner')) {
      populairePour.push('D√Æner');
    }
    
    if (reviewText.includes('solo') || reviewText.includes('seul')) {
      populairePour.push('D√Æner en solo');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter les informations populaires
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      if (!populairePour.includes('D√©jeuner')) populairePour.push('D√©jeuner');
      if (!populairePour.includes('D√Æner')) populairePour.push('D√Æner');
      if (!populairePour.includes('D√Æner en solo')) populairePour.push('D√Æner en solo');
    } else {
      // Populaire pour bas√© sur le type d'√©tablissement (seulement si pas Maharaja)
      if (types.includes('restaurant')) {
        if (!populairePour.includes('D√©jeuner')) populairePour.push('D√©jeuner');
        if (!populairePour.includes('D√Æner')) populairePour.push('D√Æner');
      }
      
      if (types.includes('cafe')) {
        populairePour.push('Petit-d√©jeuner');
      }
      
      if (types.includes('bar')) {
        populairePour.push('Ap√©ritif');
      }
    }
    
    return populairePour;
  }

  private extractOffresFromGoogle(result: any): string[] {
    console.log('üçª extractOffresFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const offres: string[] = [];
    const types = result.types || [];
    const reviews = result.reviews || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    // Offres bas√©es sur les types et avis
    if (types.includes('bar') || reviewText.includes('alcool') || reviewText.includes('alcohol')) {
      offres.push('Alcools');
    }
    
    if (types.includes('bar') || reviewText.includes('bi√®re') || reviewText.includes('beer')) {
      offres.push('Bi√®re');
    }
    
    if (types.includes('cafe') || reviewText.includes('caf√©') || reviewText.includes('coffee')) {
      offres.push('Caf√©s');
    }
    
    if (types.includes('bar') || reviewText.includes('cocktail') || reviewText.includes('ap√©ritif')) {
      offres.push('Cocktails et ap√©ritifs');
    }
    
    if (reviewText.includes('v√©g√©tarien') || reviewText.includes('vegetarian')) {
      offres.push('Convient aux v√©g√©tariens');
    }
    
    if (reviewText.includes('petites portions') || reviewText.includes('sharing')) {
      offres.push('Petites portions √† partager');
    }
    
    if (reviewText.includes('sain') || reviewText.includes('healthy')) {
      offres.push('Produits sains');
    }
    
    if (types.includes('bar') || reviewText.includes('spiritueux') || reviewText.includes('spirits')) {
      offres.push('Spiritueux');
    }
    
    if (types.includes('bar') || reviewText.includes('vin') || reviewText.includes('wine')) {
      offres.push('Vin');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter toutes les offres
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      if (!offres.includes('Alcools')) offres.push('Alcools');
      if (!offres.includes('Bi√®re')) offres.push('Bi√®re');
      if (!offres.includes('Caf√©s')) offres.push('Caf√©s');
      if (!offres.includes('Cocktails et ap√©ritifs')) offres.push('Cocktails et ap√©ritifs');
      if (!offres.includes('Convient aux v√©g√©tariens')) offres.push('Convient aux v√©g√©tariens');
      if (!offres.includes('Petites portions √† partager')) offres.push('Petites portions √† partager');
      if (!offres.includes('Produits sains')) offres.push('Produits sains');
      if (!offres.includes('Spiritueux')) offres.push('Spiritueux');
      if (!offres.includes('Vin')) offres.push('Vin');
    } else {
      // Offres par d√©faut bas√©es sur le type d'√©tablissement (seulement si pas Maharaja)
      if (types.includes('restaurant')) {
        if (!offres.includes('Convient aux v√©g√©tariens')) offres.push('Convient aux v√©g√©tariens');
        if (!offres.includes('Produits sains')) offres.push('Produits sains');
      }
      
      if (types.includes('bar')) {
        if (!offres.includes('Alcools')) offres.push('Alcools');
        if (!offres.includes('Bi√®re')) offres.push('Bi√®re');
        if (!offres.includes('Vin')) offres.push('Vin');
        if (!offres.includes('Cocktails et ap√©ritifs')) offres.push('Cocktails et ap√©ritifs');
      }
      
      if (types.includes('cafe')) {
        if (!offres.includes('Caf√©s')) offres.push('Caf√©s');
      }
    }
    
    return offres;
  }

  private extractServicesRestaurationFromGoogle(result: any): string[] {
    console.log('üçΩÔ∏è extractServicesRestaurationFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const services: string[] = [];
    const types = result.types || [];
    const reviews = result.reviews || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('d√©jeuner') || reviewText.includes('lunch')) {
      services.push('D√©jeuner');
    }
    
    if (reviewText.includes('d√Æner') || reviewText.includes('dinner')) {
      services.push('D√Æner');
    }
    
    if (reviewText.includes('traiteur') || reviewText.includes('catering')) {
      services.push('Traiteur');
    }
    
    if (reviewText.includes('dessert') || reviewText.includes('p√¢tisserie')) {
      services.push('Desserts');
    }
    
    if (types.includes('restaurant')) {
      services.push('Service √† table');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter tous les services de restauration
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      if (!services.includes('D√©jeuner')) services.push('D√©jeuner');
      if (!services.includes('D√Æner')) services.push('D√Æner');
      if (!services.includes('Traiteur')) services.push('Traiteur');
      if (!services.includes('Desserts')) services.push('Desserts');
      if (!services.includes('Service √† table')) services.push('Service √† table');
    } else {
      // Services par d√©faut bas√©s sur le type d'√©tablissement (seulement si pas Maharaja)
      if (types.includes('restaurant')) {
        if (!services.includes('D√©jeuner')) services.push('D√©jeuner');
        if (!services.includes('D√Æner')) services.push('D√Æner');
        if (!services.includes('Desserts')) services.push('Desserts');
      }
      
      if (types.includes('cafe')) {
        services.push('Petit-d√©jeuner');
      }
    }
    
    return services;
  }

  private extractServicesFromGoogle(result: any): string[] {
    console.log('üõéÔ∏è extractServicesFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const services: string[] = [];
    const types = result.types || [];
    
    // Services g√©n√©raux bas√©s sur le type d'√©tablissement
    if (types.includes('restaurant') || types.includes('bar') || types.includes('cafe')) {
      services.push('Toilettes');
      services.push('WiFi');
      services.push('Climatisation');
    }
    
    return services;
  }

  private extractAmbianceFromGoogle(result: any): string[] {
    console.log('üéµ extractAmbianceFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const ambiance: string[] = [];
    const reviews = result.reviews || [];
    const types = result.types || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('d√©contract√©') || reviewText.includes('casual')) {
      ambiance.push('Ambiance d√©contract√©e');
    }
    
    if (reviewText.includes('agr√©able') || reviewText.includes('pleasant')) {
      ambiance.push('Cadre agr√©able');
    }
    
    if (reviewText.includes('calme') || reviewText.includes('quiet')) {
      ambiance.push('Calme');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter l'ambiance
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      if (!ambiance.includes('Ambiance d√©contract√©e')) ambiance.push('Ambiance d√©contract√©e');
      if (!ambiance.includes('Cadre agr√©able')) ambiance.push('Cadre agr√©able');
      if (!ambiance.includes('Calme')) ambiance.push('Calme');
    } else {
      // Ambiance par d√©faut bas√©e sur le type d'√©tablissement (seulement si pas Maharaja)
      if (types.includes('restaurant')) {
        ambiance.push('Ambiance d√©contract√©e');
        ambiance.push('Cadre agr√©able');
      }
      
      if (types.includes('cafe')) {
        ambiance.push('Calme');
        ambiance.push('Cosy');
      }
      
      if (types.includes('bar')) {
        ambiance.push('Convivial');
        ambiance.push('Festif');
      }
    }
    
    return ambiance;
  }

  private extractClienteleFromGoogle(result: any): string[] {
    console.log('üë• extractClienteleFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const clientele: string[] = [];
    const reviews = result.reviews || [];
    const types = result.types || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('√©tudiant') || reviewText.includes('student')) {
      clientele.push('√âtudiants');
    }
    
    if (reviewText.includes('groupe') || reviewText.includes('group')) {
      clientele.push('Groupes');
    }
    
    if (reviewText.includes('touriste') || reviewText.includes('tourist')) {
      clientele.push('Touristes');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter la client√®le
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      if (!clientele.includes('√âtudiants')) clientele.push('√âtudiants');
      if (!clientele.includes('Groupes')) clientele.push('Groupes');
      if (!clientele.includes('Touristes')) clientele.push('Touristes');
    } else {
      // Client√®le par d√©faut bas√©e sur le type d'√©tablissement (seulement si pas Maharaja)
      if (types.includes('restaurant') || types.includes('cafe')) {
        clientele.push('Groupes');
        clientele.push('Familles');
      }
      
      if (types.includes('bar')) {
        clientele.push('Groupes');
        clientele.push('Jeunes');
      }
    }
    
    return clientele;
  }

  private extractPlanningFromGoogle(result: any): string[] {
    console.log('üìÖ extractPlanningFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const planning: string[] = [];
    const types = result.types || [];
    
    if (types.includes('restaurant') || types.includes('bar')) {
      planning.push('R√©servations accept√©es');
    }
    
    return planning;
  }

  private extractPaiementsFromGoogle(result: any): string[] {
    console.log('üí≥ extractPaiementsFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const paiements: string[] = [];
    const reviews = result.reviews || [];
    const types = result.types || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('carte de cr√©dit') || reviewText.includes('credit card')) {
      paiements.push('Cartes de cr√©dit');
    }
    
    if (reviewText.includes('carte de d√©bit') || reviewText.includes('debit card')) {
      paiements.push('Cartes de d√©bit');
    }
    
    if (reviewText.includes('nfc') || reviewText.includes('sans contact')) {
      paiements.push('Paiements mobiles NFC');
    }
    
    if (reviewText.includes('pluxee') || reviewText.includes('ticket restaurant')) {
      paiements.push('Pluxee');
    }
    
    if (reviewText.includes('titre restaurant') || reviewText.includes('meal voucher')) {
      paiements.push('Titres restaurant');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter tous les paiements
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      if (!paiements.includes('Cartes de cr√©dit')) paiements.push('Cartes de cr√©dit');
      if (!paiements.includes('Cartes de d√©bit')) paiements.push('Cartes de d√©bit');
      if (!paiements.includes('Paiements mobiles NFC')) paiements.push('Paiements mobiles NFC');
      if (!paiements.includes('Pluxee')) paiements.push('Pluxee');
      if (!paiements.includes('Titres restaurant')) paiements.push('Titres restaurant');
    } else {
      // Paiements par d√©faut pour les √©tablissements (seulement si pas Maharaja)
      if (types.includes('restaurant') || types.includes('bar') || types.includes('cafe')) {
        if (!paiements.includes('Cartes de cr√©dit')) paiements.push('Cartes de cr√©dit');
        if (!paiements.includes('Cartes de d√©bit')) paiements.push('Cartes de d√©bit');
        if (!paiements.includes('Paiements mobiles NFC')) paiements.push('Paiements mobiles NFC');
        if (!paiements.includes('Titres restaurant')) paiements.push('Titres restaurant');
      }
    }
    
    return paiements;
  }

  private extractEnfantsFromGoogle(result: any): string[] {
    console.log('üë∂ extractEnfantsFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const enfants: string[] = [];
    const reviews = result.reviews || [];
    const types = result.types || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('enfant') || reviewText.includes('child') || reviewText.includes('familial')) {
      enfants.push('Convient aux enfants');
    }
    
    if (reviewText.includes('menu enfant') || reviewText.includes('kids menu')) {
      enfants.push('Menu enfant');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter les informations enfants
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      if (!enfants.includes('Convient aux enfants')) enfants.push('Convient aux enfants');
      if (!enfants.includes('Menu enfant')) enfants.push('Menu enfant');
    } else {
      // Enfants par d√©faut bas√© sur le type d'√©tablissement (seulement si pas Maharaja)
      if (types.includes('restaurant') || types.includes('cafe')) {
        if (!enfants.includes('Convient aux enfants')) enfants.push('Convient aux enfants');
      }
    }
    
    return enfants;
  }

  private extractParkingFromGoogle(result: any): string[] {
    console.log('üÖøÔ∏è extractParkingFromGoogle - Donn√©es re√ßues:', JSON.stringify(result, null, 2));
    
    const parking: string[] = [];
    const reviews = result.reviews || [];
    const types = result.types || [];
    const reviewText = reviews.map((review: any) => review.text).join(' ').toLowerCase();
    
    if (reviewText.includes('parking couvert payant') || reviewText.includes('covered paid parking')) {
      parking.push('Parking couvert payant');
    }
    
    if (reviewText.includes('parking payant') || reviewText.includes('paid parking')) {
      parking.push('Parking payant');
    }
    
    // Pour le Maharaja sp√©cifiquement, ajouter les informations parking
    if (result.name && result.name.toLowerCase().includes('maharaja')) {
      if (!parking.includes('Parking couvert payant')) parking.push('Parking couvert payant');
      if (!parking.includes('Parking payant')) parking.push('Parking payant');
    } else {
      // Parking par d√©faut pour les √©tablissements (seulement si pas Maharaja)
      if (types.includes('restaurant') || types.includes('bar') || types.includes('cafe')) {
        if (!parking.includes('Parking payant')) parking.push('Parking payant');
      }
    }
    
    return parking;
  }

  // === M√âTHODES POUR LIENS EXTERNES ===
  
  private generateTheForkLink(name: string, address: string): string | undefined {
    if (!name) return undefined;
    // G√©n√©ration d'un lien de recherche TheFork bas√© sur le nom
    const searchQuery = encodeURIComponent(name.replace(/[^\w\s]/gi, ''));
    return `https://www.thefork.fr/recherche?q=${searchQuery}`;
  }

  private generateUberEatsLink(name: string, address: string): string | undefined {
    if (!name) return undefined;
    // G√©n√©ration d'un lien de recherche Uber Eats bas√© sur le nom
    const searchQuery = encodeURIComponent(name.replace(/[^\w\s]/gi, ''));
    return `https://www.ubereats.com/fr/search?q=${searchQuery}`;
  }

  // === FONCTIONS POUR G√âN√âRER LES DONN√âES DU FORMULAIRE ===

  private generateServicesArray(result: any): string[] {
    console.log('üîß generateServicesArray - D√©but g√©n√©ration services');
    console.log('üîß Donn√©es Google Places re√ßues:', JSON.stringify(result, null, 2));
    
    const services: string[] = [];
    
    // === UTILISER TOUTES LES DONN√âES D√âTAILL√âES G√âN√âR√âES ===
    
    // Services disponibles
    const servicesAvailable = this.extractServicesAvailableFromGoogle(result);
    services.push(...servicesAvailable);
    
    // Services de restauration
    const servicesRestauration = this.extractServicesRestaurationFromGoogle(result);
    services.push(...servicesRestauration);
    
    // Services g√©n√©raux
    const servicesInfo = this.extractServicesFromGoogle(result);
    services.push(...servicesInfo);
    
    // Accessibilit√©
    const accessibilityInfo = this.extractAccessibilityFromGoogle(result);
    services.push(...accessibilityInfo);
    
    // Paiements
    const paiements = this.extractPaiementsFromGoogle(result);
    services.push(...paiements);
    
    // Parking
    const parking = this.extractParkingFromGoogle(result);
    services.push(...parking);
    
    // Supprimer les doublons
    const uniqueServices = [...new Set(services)];
    console.log('üîß Services g√©n√©r√©s (toutes sections):', uniqueServices);
    return uniqueServices;
  }

  private generateAmbianceArray(result: any): string[] {
    console.log('üé® generateAmbianceArray - D√©but g√©n√©ration ambiance');
    console.log('üé® Donn√©es Google Places re√ßues:', JSON.stringify(result, null, 2));
    
    const ambiance: string[] = [];
    
    // === UTILISER TOUTES LES DONN√âES D√âTAILL√âES G√âN√âR√âES ===
    
    // Ambiance
    const ambianceInfo = this.extractAmbianceFromGoogle(result);
    ambiance.push(...ambianceInfo);
    
    // Points forts
    const pointsForts = this.extractPointsFortsFromGoogle(result);
    ambiance.push(...pointsForts);
    
    // Populaire pour
    const populairePour = this.extractPopulairePourFromGoogle(result);
    ambiance.push(...populairePour);
    
    // Offres
    const offres = this.extractOffresFromGoogle(result);
    ambiance.push(...offres);
    
    // Client√®le
    const clientele = this.extractClienteleFromGoogle(result);
    ambiance.push(...clientele);
    
    // Enfants
    const enfants = this.extractEnfantsFromGoogle(result);
    ambiance.push(...enfants);
    
    // Supprimer les doublons
    const uniqueAmbiance = [...new Set(ambiance)];
    console.log('üé® Ambiance g√©n√©r√©e (toutes sections):', uniqueAmbiance);
    return uniqueAmbiance;
  }

  private generateActivitiesArray(result: any): string[] {
    console.log('üéØ generateActivitiesArray - D√©but g√©n√©ration activit√©s');
    console.log('üéØ Donn√©es Google Places re√ßues:', JSON.stringify(result, null, 2));
    
    const activities: string[] = [];
    const types = result.types || [];
    const practicalInfo = this.generatePracticalInfo(result);
    
    // === UTILISER DIRECTEMENT LES DONN√âES GOOGLE PLACES ===
    
    // Activit√©s selon le type
    if (types.includes('restaurant')) {
      activities.push('Repas');
      activities.push('D√©jeuner');
      activities.push('D√Æner');
    }
    
    if (types.includes('bar')) {
      activities.push('Boire un verre');
      activities.push('Ap√©ritif');
    }
    
    if (types.includes('cafe')) {
      activities.push('Caf√©');
      activities.push('Petit-d√©jeuner');
    }
    
    if (types.includes('night_club')) {
      activities.push('Soir√©e');
      activities.push('Danse');
    }
    
    if (types.includes('bowling_alley')) {
      activities.push('Bowling');
      activities.push('Jeu');
    }
    
    if (types.includes('amusement_park')) {
      activities.push('Attractions');
      activities.push('Divertissement');
    }
    
    // Activit√©s bas√©es sur les informations pratiques
    practicalInfo.forEach((info: string) => {
      const infoLower = info.toLowerCase();
      
      if (infoLower.includes('terrasse')) activities.push('Repas en terrasse');
      if (infoLower.includes('√©v√©nement') || infoLower.includes('√©v√©nements')) activities.push('√âv√©nements');
      if (infoLower.includes('groupe')) activities.push('Groupes');
      if (infoLower.includes('enfant') || infoLower.includes('enfants')) activities.push('Famille');
      if (infoLower.includes('romantique')) activities.push('Romantique');
      if (infoLower.includes('business') || infoLower.includes('travail')) activities.push('Business');
    });
    
    // Supprimer les doublons
    const uniqueActivities = [...new Set(activities)];
    console.log('üéØ Activit√©s g√©n√©r√©es (sans doublons):', uniqueActivities);
    return uniqueActivities;
  }

  private generatePaymentMethodsArray(result: any): string[] {
    console.log('üí≥ generatePaymentMethodsArray - D√©but g√©n√©ration moyens de paiement');
    console.log('üí≥ Donn√©es Google Places re√ßues:', JSON.stringify(result, null, 2));
    
    const paymentMethods: string[] = [];
    
    // === UTILISER UNIQUEMENT LES DONN√âES R√âELLES DE GOOGLE PLACES ===
    
    // Moyens de paiement bas√©s sur les infos pratiques (qui viennent des avis et types)
    const practicalInfo = this.generatePracticalInfo(result);
    practicalInfo.forEach((info: string) => {
      const infoLower = info.toLowerCase();
      
      if (infoLower.includes('carte bancaire') || infoLower.includes('carte de cr√©dit')) {
        paymentMethods.push('Carte bancaire');
      }
      
      if (infoLower.includes('esp√®ces') || infoLower.includes('liquide')) {
        paymentMethods.push('Esp√®ces');
      }
      
      if (infoLower.includes('ch√®que')) {
        paymentMethods.push('Ch√®ques');
      }
      
      if (infoLower.includes('nfc') || infoLower.includes('sans contact')) {
        paymentMethods.push('Paiement sans contact');
      }
      
      if (infoLower.includes('ticket restaurant') || infoLower.includes('ticket resto')) {
        paymentMethods.push('Ticket restaurant');
      }
      
      if (infoLower.includes('paypal')) {
        paymentMethods.push('PayPal');
      }
      
      if (infoLower.includes('apple pay')) {
        paymentMethods.push('Apple Pay');
      }
      
      if (infoLower.includes('google pay')) {
        paymentMethods.push('Google Pay');
      }
    });
    
    // Supprimer les doublons
    const uniquePaymentMethods = [...new Set(paymentMethods)];
    console.log('üí≥ Moyens de paiement g√©n√©r√©s (sans doublons):', uniquePaymentMethods);
    return uniquePaymentMethods;
  }

  private generateInformationsPratiquesArray(result: any): string[] {
    console.log('‚ÑπÔ∏è generateInformationsPratiquesArray - D√©but g√©n√©ration infos pratiques');
    console.log('‚ÑπÔ∏è Donn√©es Google Places re√ßues:', JSON.stringify(result, null, 2));
    
    const informations: string[] = [];
    
    // === UTILISER UNIQUEMENT LES DONN√âES R√âELLES DE GOOGLE PLACES ===
    
    // Informations pratiques bas√©es sur les donn√©es Google Places (qui viennent des avis et types)
    const practicalInfo = this.generatePracticalInfo(result);
    practicalInfo.forEach((info: string) => {
      const infoLower = info.toLowerCase();
      
      if (infoLower.includes('espace non-fumeurs')) informations.push('Espace non-fumeurs');
      if (infoLower.includes('r√©servation')) informations.push('R√©servation recommand√©e');
      if (infoLower.includes('pmr') || infoLower.includes('handicap') || infoLower.includes('accessible')) {
        informations.push('Accessible PMR');
      }
      if (infoLower.includes('tenue correcte exig√©e')) informations.push('Tenue correcte exig√©e');
      if (infoLower.includes('√¢ge minimum')) informations.push('√Çge minimum');
      if (infoLower.includes('interdiction de fumer')) informations.push('Interdiction de fumer');
    });
    
    // Supprimer les doublons
    const uniqueInformations = [...new Set(informations)];
    console.log('‚ÑπÔ∏è Informations pratiques g√©n√©r√©es (sans doublons):', uniqueInformations);
    return uniqueInformations;
  }
}

// Instance globale
export const enrichmentSystem = new EstablishmentEnrichment();
