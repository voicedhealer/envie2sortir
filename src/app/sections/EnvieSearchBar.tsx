"use client";

import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/navigation";

/**
 * Composant de barre de recherche principale pour l'application "Envie de sortir"
 * 
 * Fonctionnalit√©s principales :
 * - Recherche par envie avec effet typewriter
 * - S√©lection de ville avec autocompl√©tion
 * - G√©olocalisation automatique
 * - S√©lection du rayon de recherche
 * - Navigation vers la page de r√©sultats
 * 
 * @returns {JSX.Element} Composant de barre de recherche
 */
export default function EnvieSearchBar() {
  const router = useRouter();
  
  // === R√âF√âRENCES DOM ===
  /** R√©f√©rence pour l'√©l√©ment d'affichage du typewriter */
  const typeRef = useRef<HTMLSpanElement>(null);
  /** R√©f√©rence pour l'input de s√©lection de ville */
  const cityInputRef = useRef<HTMLInputElement>(null);
  /** R√©f√©rence pour le dropdown de villes */
  const dropdownRef = useRef<HTMLDivElement>(null);

  // === √âTAT LOCAL ===
  /** √âtat indiquant si l'utilisateur est en train de taper */
  const [isTyping, setIsTyping] = useState(false);
  /** Valeur saisie dans le champ "envie" */
  const [inputValue, setInputValue] = useState("");
  /** Ville s√©lectionn√©e ou saisie */
  const [cityValue, setCityValue] = useState("");
  /** √âtat d'affichage du dropdown de localisation */
  const [showLocationDropdown, setShowLocationDropdown] = useState(false);
  /** Coordonn√©es GPS de l'utilisateur */
  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);
  /** Liste des villes filtr√©es selon la saisie */
  const [filteredCities, setFilteredCities] = useState<string[]>([]);
  /** Rayon de recherche s√©lectionn√© (en km) */
  const [selectedRadius, setSelectedRadius] = useState(5);

  // === DONN√âES STATIQUES ===
  /** Liste des villes disponibles pour la recherche */
  const cities = [
    "Paris, France", "Lyon, France", "Marseille, France", "Toulouse, France", "Nantes, France",
    "Strasbourg, France", "Montpellier, France", "Bordeaux, France", "Lille, France", "Rennes, France",
    "Reims, France", "Saint-√âtienne, France", "Toulon, France", "Le Havre, France", "Dijon, France",
    "Angers, France", "Grenoble, France", "Villeurbanne, France", "Le Mans, France", "Aix-en-Provence, France"
  ];

  /** Options disponibles pour le rayon de recherche */
  const radiusOptions = [
    { value: 1, label: "1 km" },
    { value: 3, label: "3 km" },
    { value: 5, label: "5 km" },
    { value: 10, label: "10 km" },
    { value: 20, label: "20 km" },
    { value: 50, label: "50 km" }
  ];

  // === EFFET TYPEWRITER ===
  /**
   * Effet qui g√®re l'animation typewriter dans le champ de recherche
   * 
   * Comportement :
   * - Tape les phrases caract√®re par caract√®re (gauche vers droite)
   * - Efface les phrases caract√®re par caract√®re (droite vers gauche)
   * - Cycle √† travers toutes les phrases de suggestion
   * - Se d√©sactive quand l'utilisateur commence √† taper
   */
  useEffect(() => {
    /** Phrases utilis√©es pour l'effet typewriter (suggestions d'activit√©s) */
    const typewriterPhrases = [
      "manger une cr√™pe au nutella",
      "boire une bi√®re artisanale",
      "faire un laser game",
      "faire du patin √† roulettes",
      "manger un tacos 3 viandes",
      "d√©couvrir un bar d'ambiance",
      "manger une pizza au fromage",
      "faire du karting en famille",
      "boire un cocktail mojito",
      "faire un escape game",
      "manger un burger extra",
      "danser en bo√Æte de nuit"
    ];

    // Configuration des vitesses d'animation
    const typingSpeed = 80;      // Vitesse de frappe (ms par caract√®re)
    const erasingSpeed = 50;     // Vitesse d'effacement (ms par caract√®re)
    const initialDelay = 500;    // D√©lai avant le d√©but de l'animation
    const newTextDelay = 2000;   // Pause entre les phrases

    // Variables de contr√¥le de l'animation
    let textIndex = 0;  // Index de la phrase actuelle
    let charIndex = 0;  // Index du caract√®re actuel
    let mounted = true; // Flag pour √©viter les fuites m√©moire

    /**
     * Fonction r√©cursive qui tape le texte caract√®re par caract√®re
     */
    const type = () => {
      if (!mounted || !typeRef.current || isTyping) return;
      
      if (charIndex < typewriterPhrases[textIndex].length) {
        // Ajoute le caract√®re suivant
        typeRef.current.textContent = typewriterPhrases[textIndex].substring(0, charIndex + 1);
        charIndex++;
        setTimeout(type, typingSpeed);
      } else {
        // Phrase termin√©e, commence l'effacement apr√®s une pause
        setTimeout(erase, newTextDelay);
      }
    };

    /**
     * Fonction r√©cursive qui efface le texte caract√®re par caract√®re
     */
    const erase = () => {
      if (!mounted || !typeRef.current || isTyping) return;
      
      if (charIndex > 0) {
        charIndex--;
        // Retire le dernier caract√®re
        typeRef.current.textContent = typewriterPhrases[textIndex].substring(0, charIndex);
        setTimeout(erase, erasingSpeed);
      } else {
        // Texte effac√©, passe √† la phrase suivante
        textIndex = (textIndex + 1) % typewriterPhrases.length;
        setTimeout(type, typingSpeed + 500);
      }
    };

    // D√©marre l'animation si les conditions sont r√©unies
    if (typeRef.current && !isTyping) {
      typeRef.current.textContent = "";
      const start = setTimeout(type, initialDelay);
      return () => { mounted = false; clearTimeout(start); };
    }
  }, [isTyping]);

  // === GESTIONNAIRES D'√âV√âNEMENTS ===

  /**
   * G√®re les changements dans le champ de saisie "envie"
   * Active/d√©sactive l'effet typewriter selon la saisie
   */
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setInputValue(value);
    // D√©sactive le typewriter si l'utilisateur tape
    setIsTyping(value.length > 0);
  };

  /**
   * G√®re les changements dans le champ de s√©lection de ville
   * Met √† jour la liste filtr√©e et affiche le dropdown
   */
  const handleCityInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setCityValue(value);
    
    if (value.trim()) {
      // Filtre les villes selon la saisie (insensible √† la casse)
      const filtered = cities.filter(city => 
        city.toLowerCase().includes(value.toLowerCase())
      );
      setFilteredCities(filtered);
      setShowLocationDropdown(true);
    } else {
      // Affiche toutes les villes si le champ est vide
      setFilteredCities(cities);
      setShowLocationDropdown(true);
    }
  };

  /**
   * G√®re le focus sur le champ ville
   * Affiche le dropdown avec les suggestions appropri√©es
   */
  const handleCityInputFocus = () => {
    if (cityValue.trim()) {
      const filtered = cities.filter(city => 
        city.toLowerCase().includes(cityValue.toLowerCase())
      );
      setFilteredCities(filtered);
      setShowLocationDropdown(true);
    } else {
      setFilteredCities(cities);
      setShowLocationDropdown(true);
    }
  };

  /**
   * Active la g√©olocalisation pour localiser l'utilisateur
   * Utilise l'API navigator.geolocation du navigateur
   */
  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ lat: latitude, lng: longitude });
          setCityValue("Autour de moi");
          setShowLocationDropdown(false);
          cityInputRef.current?.focus();
        },
        (error) => {
          console.error("Erreur de g√©olocalisation:", error);
          alert("Impossible de r√©cup√©rer votre position. V√©rifiez que vous avez autoris√© la g√©olocalisation.");
        }
      );
    } else {
      alert("La g√©olocalisation n'est pas support√©e par votre navigateur.");
    }
  };

  /**
   * S√©lectionne une ville dans le dropdown
   * @param {string} city - Nom de la ville s√©lectionn√©e
   */
  const selectCity = (city: string) => {
    console.log('üèôÔ∏è S√©lection de la ville:', city);
    
    // Fermer imm√©diatement le dropdown
    setShowLocationDropdown(false);
    
    // Mettre √† jour la valeur imm√©diatement
    setCityValue(city);
    
    // Focus sur l'input imm√©diatement
    cityInputRef.current?.focus();
  };

  /**
   * Track la recherche dans les analytics
   */
  const trackSearch = async (searchTerm: string, searchedCity?: string) => {
    try {
      await fetch('/api/analytics/search/track', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          searchTerm: searchTerm.trim(),
          resultCount: 0, // Sera mis √† jour sur la page de r√©sultats
          searchedCity: searchedCity,
          city: cityValue !== "Autour de moi" ? cityValue : undefined,
        }),
      });
    } catch (error) {
      console.error('Error tracking search:', error);
      // Ne pas bloquer l'utilisateur en cas d'erreur de tracking
    }
  };

  /**
   * G√®re la soumission du formulaire de recherche
   * Valide les donn√©es et navigue vers la page de r√©sultats
   */
  const submit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validation : v√©rification que l'envie est renseign√©e
    if (!inputValue.trim()) {
      alert("Veuillez d√©crire votre envie !");
      return;
    }

    // Track la recherche (non-bloquant)
    trackSearch(inputValue, cityValue !== "Autour de moi" ? cityValue : undefined);

    // Construction des param√®tres URL pour la recherche
    const params = new URLSearchParams();
    params.set("envie", inputValue.trim());
    params.set("rayon", selectedRadius.toString());
    
    // Ajout de la ville si renseign√©e (sauf g√©olocalisation)
    if (cityValue && cityValue !== "Autour de moi") {
      params.set("ville", cityValue);
    }
    
    // Ajout des coordonn√©es GPS si disponibles
    if (userLocation) {
      params.set("lat", userLocation.lat.toString());
      params.set("lng", userLocation.lng.toString());
    }

    // Navigation vers la page de r√©sultats
    router.push(`/recherche/envie?${params.toString()}`);
  };

  // === GESTION DES CLICS EXT√âRIEURS ===
  // Supprim√© temporairement pour √©viter les conflits

  // === RENDU DU COMPOSANT ===
  return (
    <form onSubmit={submit} className="bg-white rounded-xl shadow-lg border border-gray-200 relative overflow-visible max-w-8xl mx-auto">
      <div className="flex flex-col md:flex-row gap-3 p-4">

        {/* === SECTION ENVIE === */}
        {/* Structure flex pour alignement parfait du label et input */}
        <div className="flex-[2] flex items-center gap-1">
          {/* Label "Envie de" */}
          <span className="text-orange-500 text-l font-small">Envie de</span>
          
          {/* Container pour input + typewriter avec positionnement relatif */}
          <div className="relative flex-1 flex items-center">
            {/* Champ de saisie principal avec hauteur fixe pour alignement */}
            <input
              name="envie"
              value={inputValue}
              onChange={handleInputChange}
              className="w-full px-4 py-3 h-12 outline-none text-gray-900 bg-transparent border-b-2 border-gray-200 focus:border-orange-500 transition-colors text-lg"
              aria-label="D√©crivez votre envie"
            />
            
            {/* Effet typewriter (visible uniquement si pas de saisie) */}
            {/* Positionnement absolu avec centrage vertical parfait */}
            {!isTyping && (
              <span
                ref={typeRef}
                className="absolute left-0 inset-y-0 flex items-center text-gray-400 pointer-events-none text-base font-normal select-none whitespace-nowrap"
                style={{
                  borderRight: '1px solid #f97316', // Curseur orange clignotant
                  animation: 'blink 1s infinite',
                  height: '1.3em',
                  alignSelf: 'center',
                }}
                aria-hidden
              />
            )}
          </div>
        </div>

        {/* === S√âPARATEUR VISUEL === */}
        <div className="hidden md:block w-px bg-gray-200" />

        {/* === SECTION LOCALISATION === */}
        {/* Structure flex identique pour alignement parfait */}
        <div className="flex-1 flex items-center gap-3">
          {/* Ic√¥ne de localisation */}
          <span className="text-gray-500">üìç</span>
          
          {/* Container pour input ville avec dropdown */}
          <div className="relative flex-1 flex items-center">
            {/* Champ de saisie ville avec m√™me hauteur que le champ envie */}
            <input
              ref={cityInputRef}
              name="city"
              value={cityValue}
              onChange={handleCityInputChange}
              onFocus={handleCityInputFocus}
              onBlur={() => {
                // Fermer le dropdown apr√®s un d√©lai pour permettre la s√©lection
                setTimeout(() => {
                  setShowLocationDropdown(false);
                }, 200);
              }}
              className="w-full px-4 py-3 h-12 outline-none text-gray-900 bg-transparent border-b-2 border-gray-200 focus:border-orange-500 transition-colors text-l"
              placeholder="Dijon"
            />
            
            {/* === DROPDOWN DE G√âOLOCALISATION === */}
            {/* Menu d√©roulant pour s√©lection ville/g√©olocalisation */}
            {showLocationDropdown && (
              <div 
                ref={dropdownRef}
                className="absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-xl shadow-lg z-50 max-h-80 overflow-hidden w-full min-w-[300px]"
              >
                <div className="py-2 overflow-y-auto max-h-80">
                  
                  {/* Option "Autour de moi" avec g√©olocalisation */}
                  <button
                    type="button"
                    onClick={(e) => {
                      console.log('üñ±Ô∏è Clic sur "Autour de moi"');
                      e.preventDefault();
                      e.stopPropagation();
                      getCurrentLocation();
                    }}
                    className="w-full px-4 py-3 text-left hover:bg-gray-50 flex items-center gap-3 cursor-pointer"
                  >
                    <span className="w-8 h-8 bg-blue-50 text-blue-600 rounded-lg flex items-center justify-center">‚úàÔ∏è</span>
                    <span className="font-medium">Autour de moi</span>
                    <span className="ml-auto text-gray-400">‚Üí</span>
                  </button>

                  {/* Liste des villes filtr√©es selon la saisie */}
                  {filteredCities.map((city) => (
                    <button
                      type="button"
                      key={city}
                      onClick={(e) => {
                        console.log('üñ±Ô∏è Clic sur la ville:', city);
                        e.preventDefault();
                        e.stopPropagation();
                        selectCity(city);
                      }}
                      className="w-full px-4 py-3 text-left hover:bg-gray-50 flex items-center gap-3 cursor-pointer"
                    >
                      <span className="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                        <span className="text-gray-600">üìç</span>
                      </span>
                      <span className="text-gray-900">{city}</span>
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* === S√âPARATEUR VISUEL === */}
        <div className="hidden md:block w-px bg-gray-200" />

        {/* === S√âLECTEUR DE RAYON === */}
        {/* Dropdown pour choisir la distance de recherche */}
        <div className="flex flex-col items-center gap-1">
          <select
            value={selectedRadius}
            onChange={(e) => setSelectedRadius(Number(e.target.value))}
            className="px-2 py-3 border border-gray-200 rounded-lg text-sm focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            aria-label="S√©lectionner le rayon de recherche"
          >
            {radiusOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* === BOUTON DE RECHERCHE === */}
        {/* Bouton principal de soumission du formulaire */}
        <div className="md:w-auto">
          <button 
            type="submit" 
            className="w-full h-full px-6 py-3 rounded-lg btn-gradient font-semibold text-white hover:shadow-lg transition-all duration-300"
          >
            Trouve-moi √ßa !
          </button>
        </div>
      </div>

      {/* === STYLES CSS PERSONNALIS√âS === */}
      {/* Animation du curseur clignotant pour l'effet typewriter */}
      <style jsx>{`
        @keyframes blink {
          0%, 50% { border-right-color: #f97316; }
          51%, 100% { border-right-color: transparent; }
        }
      `}</style>
    </form>
  );
}
