import { NextRequest, NextResponse } from "next/server";

/**
 * API ROUTE POUR LE G√âOCODAGE AUTOMATIQUE
 * 
 * Fichier : src/app/api/geocode/route.ts
 * 
 * Description :
 * - G√©ocode automatiquement une adresse en utilisant Nominatim (OpenStreetMap)
 * - Retourne les coordonn√©es latitude/longitude
 * - Pas de cl√© API requise (service gratuit)
 * 
 * Endpoint :
 * - GET /api/geocode?address=<adresse encod√©e>
 * 
 * Exemple d'utilisation :
 * GET /api/geocode?address=123%20Rue%20de%20la%20Paix%2C%20Paris
 * 
 * R√©ponse :
 * {
 *   "success": true,
 *   "data": {
 *     "latitude": 48.8566,
 *     "longitude": 2.3522
 *   }
 * }
 */

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const address = searchParams.get('address');

    // Validation du param√®tre address
    if (!address || address.trim() === '') {
      return NextResponse.json(
        { 
          success: false,
          error: "Param√®tre 'address' manquant ou vide",
          details: "L'adresse √† g√©ocoder doit √™tre fournie"
        },
        { status: 400 }
      );
    }

    // Encodage de l'adresse pour l'URL
    const encodedAddress = encodeURIComponent(address.trim());
    
    // R√©cup√©ration du param√®tre limit (pour l'autocomplete)
    const limit = searchParams.get('limit') || '1';
    
    // Construction de l'URL Nominatim
    const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodedAddress}&limit=${limit}&addressdetails=1&countrycodes=fr,be,ch,ca&accept-language=fr`;
    
    console.log(`üîç G√©ocodage de l'adresse: ${address}`);
    console.log(`üåê URL Nominatim: ${nominatimUrl}`);

    // Appel √† l'API Nominatim
    const response = await fetch(nominatimUrl, {
      method: 'GET',
      headers: {
        'User-Agent': 'Envie2Sortir/1.0 (https://envie2sortir.fr)',
        'Accept': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    console.log(`üì° R√©ponse Nominatim:`, data);

    // V√©rification des r√©sultats
    if (!Array.isArray(data) || data.length === 0) {
      return NextResponse.json(
        { 
          success: false,
          error: "Adresse non trouv√©e",
          details: "Aucune correspondance trouv√©e pour cette adresse",
          searchedAddress: address
        },
        { status: 404 }
      );
    }

    // Si limit > 1, c'est pour l'autocomplete - retourner tous les r√©sultats
    if (limit !== '1') {
      return NextResponse.json({
        success: true,
        data: data.map(result => ({
          display_name: result.display_name,
          lat: result.lat,
          lon: result.lon,
          address: result.address || {}
        }))
      });
    }

    // R√©cup√©ration du premier r√©sultat pour le g√©ocodage simple
    const firstResult = data[0];
    
    if (!firstResult.lat || !firstResult.lon) {
      return NextResponse.json(
        { 
          success: false,
          error: "Donn√©es de g√©ocodage invalides",
          details: "Les coordonn√©es retourn√©es sont invalides",
          nominatimData: firstResult
        },
        { status: 500 }
      );
    }

    // Conversion et validation des coordonn√©es
    const latitude = parseFloat(firstResult.lat);
    const longitude = parseFloat(firstResult.lon);

    // Validation des plages de coordonn√©es
    if (isNaN(latitude) || isNaN(longitude)) {
      return NextResponse.json(
        { 
          success: false,
          error: "Coordonn√©es invalides",
          details: "Impossible de parser les coordonn√©es latitude/longitude"
        },
        { status: 500 }
      );
    }

    if (latitude < -90 || latitude > 90) {
      return NextResponse.json(
        { 
          success: false,
          error: "Latitude invalide",
          details: "La latitude doit √™tre comprise entre -90 et 90"
        },
        { status: 500 }
      );
    }

    if (longitude < -180 || longitude > 180) {
      return NextResponse.json(
        { 
          success: false,
          error: "Longitude invalide",
          details: "La longitude doit √™tre comprise entre -180 et 180"
        },
        { status: 500 }
      );
    }

    // Informations suppl√©mentaires utiles
    const additionalInfo = {
      displayName: firstResult.display_name,
      type: firstResult.type,
      importance: firstResult.importance,
      country: firstResult.address?.country,
      city: firstResult.address?.city || firstResult.address?.town || firstResult.address?.village,
      postcode: firstResult.address?.postcode
    };

    console.log(`‚úÖ G√©ocodage r√©ussi: ${latitude}, ${longitude}`);
    console.log(`üìç Informations:`, additionalInfo);

    // R√©ponse de succ√®s
    return NextResponse.json({
      success: true,
      data: {
        latitude,
        longitude
      },
      additionalInfo
    });

  } catch (error) {
    console.error("‚ùå Erreur g√©ocodage:", error);
    
    return NextResponse.json(
      { 
        success: false,
        error: "Erreur interne du serveur",
        details: process.env.NODE_ENV === 'development' 
          ? error instanceof Error ? error.message : 'Erreur inconnue' 
          : "Erreur lors du g√©ocodage de l'adresse"
      },
      { status: 500 }
    );
  }
}
