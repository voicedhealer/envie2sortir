import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth-config';
import { prisma } from '@/lib/prisma';

export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json(
        { error: 'Non authentifi√©' },
        { status: 401 }
      );
    }

    const { establishmentId, imageOrder } = await request.json();

    console.log('üîÑ R√©organisation des images:', {
      establishmentId,
      userId: session.user.id,
      newOrder: imageOrder
    });

    // V√©rifier que l'√©tablissement appartient bien √† l'utilisateur
    const establishment = await prisma.establishment.findFirst({
      where: {
        id: establishmentId,
        ownerId: session.user.id
      },
      include: {
        images: true
      }
    });

    if (!establishment) {
      return NextResponse.json(
        { error: '√âtablissement non trouv√© ou acc√®s non autoris√©' },
        { status: 404 }
      );
    }

    console.log('‚úÖ √âtablissement trouv√©:', establishment.name);
    console.log('üì∏ Images actuelles:', establishment.images.length);

    // Mettre √† jour l'ordre des images
    // Pour chaque image dans le nouvel ordre, mettre √† jour son index
    const updatePromises = imageOrder.map(async (imageUrl: string, index: number) => {
      // Trouver l'image correspondante
      const image = establishment.images.find(img => img.url === imageUrl);
      
      console.log(`üîÑ Image ${index + 1}:`, {
        url: imageUrl,
        trouv√©e: !!image,
        imageId: image?.id
      });
      
      if (image) {
        return prisma.image.update({
          where: { id: image.id },
          data: { 
            ordre: index, // ‚úÖ CORRECTION : Le champ s'appelle "ordre" dans le sch√©ma
            isPrimary: index === 0 // La premi√®re image devient l'image principale
          }
        });
      }
    });

    const results = await Promise.all(updatePromises.filter(Boolean));
    console.log('‚úÖ Nombre d\'images mises √† jour:', results.length);

    // Mettre √† jour aussi l'imageUrl principale de l'√©tablissement
    if (imageOrder.length > 0) {
      await prisma.establishment.update({
        where: { id: establishmentId },
        data: { imageUrl: imageOrder[0] }
      });
    }

    console.log('‚úÖ Ordre des images mis √† jour avec succ√®s');

    return NextResponse.json({
      success: true,
      message: 'Ordre des images mis √† jour'
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©organisation des images:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la r√©organisation des images' },
      { status: 500 }
    );
  }
}

