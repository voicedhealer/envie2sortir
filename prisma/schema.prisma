// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

/// *
/// * USER - Utilisateurs simples (clients)
/// * Peuvent consulter, commenter, ajouter aux favoris
/// * Ne peuvent PAS créer d'établissements
model User {
  id               String           @id @default(cuid())
  email            String           @unique
  passwordHash     String?
  firstName        String?
  lastName         String?
  name             String?
  phone            String?
  preferences      Json?
  newsletterOptIn  Boolean          @default(true)
  provider         String?
  providerId       String?
  avatar           String?
  isVerified       Boolean          @default(false)
  favoriteCity     String?
  role             UserRole         @default(user)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  comments         UserComment[]
  favorites        UserFavorite[]
  likes            UserLike[]
  adminActions     AdminAction[]

  @@map("users")
}

/// *
/// * PROFESSIONAL - Propriétaires d'établissements
/// * Contient TOUT : authentification + données professionnelles
/// * Seuls autorisés à créer/gérer des établissements
/// * Vérification obligatoire via SIRET
/// * Relation 1:1 avec Establishment
model Professional {
  id               String           @id @default(cuid())
  siret            String           @unique
  firstName        String
  lastName         String
  email            String           @unique
  passwordHash     String
  phone            String
  companyName      String
  legalStatus      String
  subscriptionPlan SubscriptionPlan @default(FREE)
  siretVerified    Boolean          @default(false)
  siretVerifiedAt  DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  establishment    Establishment?
  updateRequests   ProfessionalUpdateRequest[]

  @@map("professionals")
}

/// *
/// * PROFESSIONAL UPDATE REQUEST - Demandes de modification d'informations professionnelles
/// * Nécessite validation admin pour email, SIRET, nom d'entreprise
/// * Vérification SMS obligatoire avant toute demande
model ProfessionalUpdateRequest {
  id                 String       @id @default(cuid())
  professionalId     String
  professional       Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  
  fieldName          String       // 'email', 'siret', 'companyName'
  oldValue           String
  newValue           String
  
  // Pour l'email : token de vérification
  verificationToken  String?
  isEmailVerified    Boolean      @default(false)
  
  // SMS verification
  smsCode            String?
  smsCodeExpiry      DateTime?
  isSmsVerified      Boolean      @default(false)
  
  status             String       @default("pending") // 'pending', 'approved', 'rejected'
  rejectionReason    String?
  
  requestedAt        DateTime     @default(now())
  reviewedAt         DateTime?
  reviewedBy         String?      // ID de l'admin
  
  @@map("professional_update_requests")
}

/// *
/// * ESTABLISHMENT - Établissements de sortie
/// * Créés et gérés uniquement par des Professionals
/// * Système de validation par l'admin avant publication
/// * Relation 1:1 avec Professional
model Establishment {
  id                    String              @id @default(cuid())
  name                  String
  slug                  String              @unique
  description           String?
  address               String
  city                  String?
  postalCode            String?
  country               String              @default("France")
  latitude              Float?
  longitude             Float?
  phone                 String?
  whatsappPhone         String?
  messengerUrl          String?
  email                 String?
  website               String?
  instagram             String?
  facebook              String?
  activities            Json?
  specialites           String              @default("")
  motsClesRecherche     String?
  services              Json?
  ambiance              Json?
  paymentMethods        Json?
  horairesOuverture     Json?
  prixMoyen             Float?
  capaciteMax           Int?
  accessibilite         Boolean             @default(false)
  parking               Boolean             @default(false)
  terrasse              Boolean             @default(false)
  status                EstablishmentStatus @default(pending)
  subscription          SubscriptionType    @default(STANDARD)
  ownerId               String              @unique
  rejectionReason       String?
  rejectedAt            DateTime?
  lastModifiedAt        DateTime?
  viewsCount            Int                 @default(0)
  clicksCount           Int                 @default(0)
  avgRating             Float?
  totalComments         Int                 @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  tiktok                String?
  youtube               String?
  imageUrl              String?
  priceMax              Float?
  priceMin              Float?
  informationsPratiques Json?
  googlePlaceId         String?
  googleBusinessUrl     String?
  enriched              Boolean             @default(false)
  enrichmentData        Json?
  envieTags             Json?
  priceLevel            Int?
  googleRating          Float?
  googleReviewCount     Int?
  theForkLink           String?
  uberEatsLink          String?
  specialties           Json?
  atmosphere            Json?
  accessibility         Json?
  accessibilityDetails  Json?
  detailedServices      Json?
  clienteleInfo         Json?
  detailedPayments      Json?
  childrenServices      Json?
  owner                 Professional        @relation(fields: [ownerId], references: [id])
  tags                  EtablissementTag[]
  events                Event[]
  featuredPromotions    FeaturedPromotion[]
  images                Image[]
  pricing               Pricing[]
  tariffs               Tariff[]
  menus                 EstablishmentMenu[]
  comments              UserComment[]
  favorites             UserFavorite[]
  likes                 UserLike[]
  adminActions          AdminAction[]

  @@map("establishments")
}

// Enums
enum UserRole {
  user
  admin
}

enum EstablishmentStatus {
  pending
  approved
  rejected
}

enum SubscriptionType {
  FREE
  STANDARD
  PREMIUM
}

enum SubscriptionPlan {
  FREE
  PREMIUM
}

// Autres modèles (simplifiés pour l'exemple)
model UserComment {
  id             String       @id @default(cuid())
  content        String
  rating         Int
  userId         String
  establishmentId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("user_comments")
}

model UserFavorite {
  id             String       @id @default(cuid())
  userId         String
  establishmentId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, establishmentId])
  @@map("user_favorites")
}

model UserLike {
  id             String       @id @default(cuid())
  userId         String
  establishmentId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, establishmentId])
  @@map("user_likes")
}

model EtablissementTag {
  id              String       @id @default(cuid())
  etablissementId String
  tag             String
  typeTag         String
  poids           Int          @default(5)
  establishment   Establishment @relation(fields: [etablissementId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())

  @@map("etablissement_tags")
}

model Event {
  id             String       @id @default(cuid())
  title          String
  description    String?
  modality       String?
  imageUrl       String?
  establishmentId String
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  startDate      DateTime
  endDate        DateTime?
  price          Float?
  maxCapacity    Int?
  isRecurring    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("events")
}

model FeaturedPromotion {
  id             String       @id @default(cuid())
  title          String
  description    String?
  establishmentId String
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  startDate      DateTime
  endDate        DateTime?
  discount       Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("featured_promotions")
}

model Image {
  id             String       @id @default(cuid())
  url            String
  altText        String?
  isPrimary      Boolean      @default(false)
  ordre          Int          @default(0)
  establishmentId String
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@map("images")
}

model Pricing {
  id             String       @id @default(cuid())
  name           String
  description    String?
  price          Float
  establishmentId String
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("pricing")
}

model Tariff {
  id             String       @id @default(cuid())
  name           String
  description    String?
  price          Float
  establishmentId String
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("tariffs")
}

model EstablishmentMenu {
  id             String       @id @default(cuid())
  name           String       // Nom du menu (ex: "Menu du jour", "Carte des vins")
  description    String?      // Description optionnelle
  fileUrl        String       // URL du fichier PDF stocké
  fileName       String       // Nom original du fichier
  fileSize       Int          // Taille du fichier en bytes
  mimeType       String       @default("application/pdf")
  order          Int          @default(0) // Ordre d'affichage
  isActive       Boolean      @default(true) // Menu actif/inactif
  establishmentId String
  establishment  Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("establishment_menus")
}

/// *
/// * ADMIN_ACTIONS - Historique des actions administratives
/// * Traçabilité complète pour conformité juridique
/// * Qui, quoi, quand, pourquoi pour chaque action
model AdminAction {
  id              String        @id @default(cuid())
  adminId         String        // ID de l'admin qui a fait l'action
  establishmentId String        // ID de l'établissement concerné
  action          AdminActionType // Type d'action effectuée
  reason          String?       // Raison optionnelle (rejet, suppression)
  previousStatus  String?       // Statut précédent
  newStatus       String?       // Nouveau statut
  details         Json?         // Détails supplémentaires (métadonnées)
  createdAt       DateTime      @default(now())
  
  // Relations
  admin           User          @relation(fields: [adminId], references: [id])
  establishment   Establishment @relation(fields: [establishmentId], references: [id])

  @@map("admin_actions")
}

/// Types d'actions administratives
enum AdminActionType {
  APPROVE         // Approuver un établissement
  REJECT          // Rejeter un établissement
  PENDING         // Remettre en attente
  DELETE          // Supprimer un établissement
  RESTORE         // Restaurer un établissement supprimé
  UPDATE          // Mise à jour d'informations
}
