generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

/// *
/// * USER - Utilisateurs simples (clients)
/// * Peuvent consulter, commenter, ajouter aux favoris
/// * Ne peuvent PAS créer d'établissements
model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  passwordHash       String?
  firstName          String?
  lastName           String?
  name               String?
  phone              String?
  preferences        Json?
  newsletterOptIn    Boolean           @default(true)
  provider           String?
  providerId         String?
  avatar             String?
  isVerified         Boolean              @default(false)
  favoriteCity       String?
  role               UserRole             @default(user)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  karmaPoints        Int                  @default(0)
  gamificationBadges Json?
  adminActions       AdminAction[]
  eventEngagements   EventEngagement[]
  comments           UserComment[]
  favorites          UserFavorite[]
  likes              UserLike[]
  adminConversations Conversation[]
  locationPreference LocationPreference?

  @@map("users")
}

/// *
/// * PROFESSIONAL - Propriétaires d'établissements
/// * Contient TOUT : authentification + données professionnelles
/// * Seuls autorisés à créer/gérer des établissements
/// * Vérification obligatoire via SIRET
/// * Relation 1:1 avec Establishment
model Professional {
  id               String                      @id @default(cuid())
  siret            String                      @unique
  firstName        String
  lastName         String
  email            String                      @unique
  passwordHash     String
  phone            String
  companyName      String
  legalStatus      String
  subscriptionPlan SubscriptionPlan            @default(FREE)
  siretVerified    Boolean                     @default(false)
  siretVerifiedAt  DateTime?
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  establishment    Establishment?
  updateRequests   ProfessionalUpdateRequest[]
  conversations    Conversation[]

  @@map("professionals")
}

/// *
/// * PROFESSIONAL UPDATE REQUEST - Demandes de modification d'informations professionnelles
/// * Nécessite validation admin pour email, SIRET, nom d'entreprise
/// * Vérification SMS obligatoire avant toute demande
model ProfessionalUpdateRequest {
  id                String       @id @default(cuid())
  professionalId    String
  fieldName         String
  oldValue          String
  newValue          String
  verificationToken String?
  isEmailVerified   Boolean      @default(false)
  smsCode           String?
  smsCodeExpiry     DateTime?
  isSmsVerified     Boolean      @default(false)
  status            String       @default("pending")
  rejectionReason   String?
  requestedAt       DateTime     @default(now())
  reviewedAt        DateTime?
  reviewedBy        String?
  professional      Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("professional_update_requests")
}

/// *
/// * ESTABLISHMENT - Établissements de sortie
/// * Créés et gérés uniquement par des Professionals
/// * Système de validation par l'admin avant publication
/// * Relation 1:1 avec Professional
model Establishment {
  id                    String              @id @default(cuid())
  name                  String
  slug                  String              @unique
  description           String?
  address               String
  city                  String?
  postalCode            String?
  country               String              @default("France")
  latitude              Float?
  longitude             Float?
  phone                 String?
  whatsappPhone         String?
  messengerUrl          String?
  email                 String?
  website               String?
  instagram             String?
  facebook              String?
  activities            Json?
  specialites           String              @default("")
  motsClesRecherche     String?
  services              Json?
  ambiance              Json?
  paymentMethods        Json?
  horairesOuverture     Json?
  prixMoyen             Float?
  capaciteMax           Int?
  accessibilite         Boolean             @default(false)
  parking               Boolean             @default(false)
  terrasse              Boolean             @default(false)
  status                EstablishmentStatus @default(pending)
  subscription          SubscriptionPlan    @default(FREE)
  ownerId               String              @unique
  rejectionReason       String?
  rejectedAt            DateTime?
  lastModifiedAt        DateTime?
  viewsCount            Int                 @default(0)
  clicksCount           Int                 @default(0)
  avgRating             Float?
  totalComments         Int                 @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  tiktok                String?
  youtube               String?
  imageUrl              String?
  priceMax              Float?
  priceMin              Float?
  informationsPratiques Json?
  googlePlaceId         String?
  googleBusinessUrl     String?
  enriched              Boolean             @default(false)
  smartEnrichmentData   Json?
  googleRating          Float?
  googleReviewCount     Int?
  envieTags             Json?
  theForkLink           String?
  uberEatsLink          String?
  enrichmentData        Json?
  priceLevel            Int?
  specialties           Json?
  atmosphere            Json?
  accessibility         Json?
  accessibilityDetails  Json?
  detailedServices      Json?
  clienteleInfo         Json?
  detailedPayments      Json?
  childrenServices      Json?
  adminActions          AdminAction[]
  clickAnalytics        ClickAnalytics[]
  dailyDeals            DailyDeal[]
  dealEngagements       DealEngagement[]
  menus                 EstablishmentMenu[]
  owner                 Professional        @relation(fields: [ownerId], references: [id])
  tags                  EtablissementTag[]
  events                Event[]
  featuredPromotions    FeaturedPromotion[]
  images                Image[]
  pricing               Pricing[]
  tariffs               Tariff[]
  comments              UserComment[]
  favorites             UserFavorite[]
  likes                 UserLike[]

  @@map("establishments")
}

model UserComment {
  id              String        @id @default(cuid())
  content         String
  rating          Int
  userId          String
  establishmentId String
  establishmentReply String?    // Réponse du professionnel à l'avis
  repliedAt       DateTime?     // Date de la réponse
  isReported      Boolean       @default(false) // Avis signalé
  reportReason    String?       // Raison du signalement
  reportedAt      DateTime?     // Date du signalement
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_comments")
}

model UserFavorite {
  id              String        @id @default(cuid())
  userId          String
  establishmentId String
  createdAt       DateTime      @default(now())
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, establishmentId])
  @@map("user_favorites")
}

model UserLike {
  id              String        @id @default(cuid())
  userId          String
  establishmentId String
  createdAt       DateTime      @default(now())
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, establishmentId])
  @@map("user_likes")
}

model EtablissementTag {
  id              String        @id @default(cuid())
  etablissementId String
  tag             String
  typeTag         String
  poids           Int           @default(5)
  createdAt       DateTime      @default(now())
  establishment   Establishment @relation(fields: [etablissementId], references: [id], onDelete: Cascade)

  @@map("etablissement_tags")
}

model Event {
  id              String            @id @default(cuid())
  title           String
  description     String?
  imageUrl        String?
  establishmentId String
  startDate       DateTime
  endDate         DateTime?
  price           Float?
  priceUnit       String?
  maxCapacity     Int?
  isRecurring     Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  modality        String?
  engagements     EventEngagement[]
  establishment   Establishment     @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@map("events")
}

/// *
/// * DAILY_DEAL - Bons plans journaliers pour établissements premium
/// * Système de promotions programmables avec médias (image/PDF)
/// * Affichage modal puis card sur les pages publiques
model DailyDeal {
  id              String        @id @default(cuid())
  establishmentId String
  title           String
  description     String
  originalPrice   Float?
  discountedPrice Float?
  imageUrl        String?
  pdfUrl          String?
  dateDebut       DateTime
  dateFin         DateTime
  heureDebut      String?
  heureFin        String?
  isActive        Boolean       @default(true)
  isDismissed     Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  modality        String?
  
  // Récurrence
  isRecurring     Boolean       @default(false) // Si le bon plan est récurrent
  recurrenceType  String?       // 'weekly', 'monthly', null
  recurrenceDays  Json?         // Pour weekly: [1,2,3,4,5] (1=lundi, 7=dimanche)
  recurrenceEndDate DateTime?   // Date de fin de la récurrence
  
  // Champs pour l'effet flip
  shortTitle      String?       // Titre court pour la face avant
  shortDescription String?      // Description courte pour la face avant
  promoUrl        String?       // Lien vers la promotion sur internet
  
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  engagements     DealEngagement[]

  @@index([establishmentId, isActive, dateDebut, dateFin])
  @@map("daily_deals")
}

/// * Engagement des utilisateurs sur les bons plans
model DealEngagement {
  id              String    @id @default(cuid())
  dealId          String
  deal            DailyDeal @relation(fields: [dealId], references: [id], onDelete: Cascade)
  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  
  type            String    // 'liked' ou 'disliked'
  userIp          String    // IP de l'utilisateur pour éviter les doublons
  timestamp       DateTime  @default(now())
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([dealId, userIp]) // Un utilisateur ne peut donner qu'un avis par bon plan
  @@index([dealId, type])
  @@index([establishmentId, type])
  @@index([timestamp])
  @@map("deal_engagements")
}

/// *
/// * EVENT_ENGAGEMENT - Engagement des utilisateurs sur les événements
/// * Système de réactions avec jauge progressive (0-150%)
/// * Gamification avec badges et karma points
model EventEngagement {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  type      String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_engagements")
}

model FeaturedPromotion {
  id              String        @id @default(cuid())
  title           String
  description     String?
  establishmentId String
  startDate       DateTime
  endDate         DateTime?
  discount        Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@map("featured_promotions")
}

model Image {
  id              String        @id @default(cuid())
  url             String
  altText         String?
  isPrimary       Boolean       @default(false)
  isCardImage     Boolean       @default(false)
  ordre           Int           @default(0)
  establishmentId String
  createdAt       DateTime      @default(now())
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@map("images")
}

model EstablishmentLearningPattern {
  id            String   @id @default(cuid())
  name          String
  detectedType  String
  correctedType String?
  googleTypes   String
  keywords      String
  confidence    Float
  isCorrected   Boolean  @default(false)
  correctedBy   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("establishment_learning_patterns")
}

model Pricing {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Float
  establishmentId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@map("pricing")
}

model Tariff {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Float
  establishmentId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@map("tariffs")
}

model EstablishmentMenu {
  id              String        @id @default(cuid())
  name            String
  description     String?
  fileUrl         String
  fileName        String
  fileSize        Int
  mimeType        String        @default("application/pdf")
  order           Int           @default(0)
  isActive        Boolean       @default(true)
  establishmentId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@map("establishment_menus")
}

/// *
/// * ADMIN_ACTIONS - Historique des actions administratives
/// * Traçabilité complète pour conformité juridique
/// * Qui, quoi, quand, pourquoi pour chaque action
model AdminAction {
  id              String          @id @default(cuid())
  adminId         String
  establishmentId String
  action          AdminActionType
  reason          String?
  previousStatus  String?
  newStatus       String?
  details         Json?
  createdAt       DateTime        @default(now())
  establishment   Establishment   @relation(fields: [establishmentId], references: [id])
  admin           User            @relation(fields: [adminId], references: [id])

  @@map("admin_actions")
}

/// *
/// * CLICK_ANALYTICS - Tracking des clics sur les pages publiques
/// * Permet aux pros premium de voir les statistiques d'engagement
/// * Données anonymisées pour respecter la vie privée
model ClickAnalytics {
  id              String        @id @default(cuid())
  establishmentId String
  elementType     String
  elementId       String
  elementName     String?
  action          String
  sectionContext  String?
  userAgent       String?
  referrer        String?
  timestamp       DateTime      @default(now())
  country         String?
  city            String?
  hour            Int?
  dayOfWeek       String?
  timeSlot        String?
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@index([establishmentId, elementType])
  @@index([timestamp])
  @@index([hour, dayOfWeek])
  @@map("click_analytics")
}

/// * SEARCH ANALYTICS - Analytics des recherches utilisateurs
/// * Capture les termes de recherche "envie de :"
/// * Track les clics post-recherche pour mesurer la conversion
/// * Identifie les opportunités (recherches sans résultats)
model SearchAnalytics {
  id                       String   @id @default(cuid())
  searchTerm               String
  resultCount              Int      @default(0)
  clickedEstablishmentId   String?
  clickedEstablishmentName String?
  userAgent                String?
  referrer                 String?
  timestamp                DateTime @default(now())
  country                  String?
  city                     String?
  searchedCity             String?

  @@index([searchTerm])
  @@index([timestamp])
  @@index([clickedEstablishmentId])
  @@map("search_analytics")
}

enum UserRole {
  user
  admin
}

enum EstablishmentStatus {
  pending
  approved
  rejected
}

enum SubscriptionPlan {
  FREE
  PREMIUM
}

/// Types d'actions administratives
enum AdminActionType {
  APPROVE
  REJECT
  PENDING
  DELETE
  RESTORE
  UPDATE
}

/// *
/// * CONVERSATION - Conversations entre professionnels et administrateurs
/// * Système de tickets/support bidirectionnel
model Conversation {
  id              String              @id @default(cuid())
  subject         String
  status          ConversationStatus  @default(open)
  professionalId  String
  adminId         String?
  lastMessageAt   DateTime            @default(now())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  professional    Professional        @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  admin           User?               @relation(fields: [adminId], references: [id])
  messages        Message[]

  @@index([professionalId, status])
  @@index([adminId, status])
  @@index([lastMessageAt])
  @@map("conversations")
}

/// *
/// * MESSAGE - Messages dans les conversations
/// * Envoyés par les pros ou les admins
model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  senderType     SenderType
  content        String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId, senderType])
  @@map("messages")
}

enum ConversationStatus {
  open
  closed
}

enum SenderType {
  PROFESSIONAL
  ADMIN
}

/// *
/// * LOCATION_PREFERENCE - Préférences de localisation des utilisateurs
/// * Stocke la ville préférée et le rayon de recherche
/// * Permet de personnaliser l'expérience selon la localisation
model LocationPreference {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Ville par défaut
  cityId             String   // ID de la ville (ex: 'dijon', 'paris')
  cityName           String   // Nom de la ville
  cityLatitude       Float    // Latitude de la ville
  cityLongitude      Float    // Longitude de la ville
  cityRegion         String?  // Région de la ville
  
  // Rayon de recherche (en km)
  searchRadius       Int      @default(20)
  
  // Mode de localisation
  mode               String   @default("manual") // 'auto', 'manual', 'ask'
  useCurrentLocation Boolean  @default(false)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("location_preferences")
}
