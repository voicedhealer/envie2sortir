generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  pro
  admin
}

enum EstablishmentCategory {
  bar
  bowling
  escape_game
  market
  nightclub
  restaurant
  cinema
  theater
  concert
  museum
  other
}

enum EstablishmentStatus {
  active
  pending
  suspended
}

enum SubscriptionType {
  basic
  premium
}

enum FeaturedPlacementType {
  homepage
  search
  map
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  role         UserRole @default(user)
  name         String?
  phone        String?
  preferences  Json?
  establishments Establishment[] @relation("OwnerEstablishments")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Establishment {
  id                      String                 @id @default(cuid())
  name                    String
  slug                    String                 @unique
  description             String?
  address                 String
  city                    String?
  postalCode              String?
  country                 String                 @default("France")
  latitude                Float?
  longitude               Float?
  phone                   String?
  email                   String?
  website                 String?
  category                EstablishmentCategory
  status                  EstablishmentStatus    @default(pending)
  specialites             String                @default("") // Stock√© comme JSON string
  motsClesRecherche       String?
  horairesOuverture       Json?
  
  // Relations
  owner                   User                   @relation("OwnerEstablishments", fields: [ownerId], references: [id])
  ownerId                 String
  images                  Image[]
  events                  Event[]
  tags                    EtablissementTag[]
  featuredPromotions      FeaturedPromotion[]
  
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model EtablissementTag {
  id              Int           @id @default(autoincrement())
  etablissementId String
  tag             String
  typeTag         String        // 'nourriture', 'activite', 'ambiance'
  poids           Int           @default(5) // importance 1-10
  createdAt       DateTime      @default(now())
  etablissement   Establishment @relation(fields: [etablissementId], references: [id], onDelete: Cascade)

  @@map("etablissement_tags")
}

model Image {
  id              String        @id @default(cuid())
  url             String
  altText         String?
  isPrimary       Boolean       @default(false)
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  establishmentId String
  createdAt       DateTime      @default(now())
}

model Event {
  id              String        @id @default(cuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime?
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  establishmentId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model FeaturedPromotion {
  id              String                @id @default(cuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  placementType   FeaturedPlacementType
  establishment   Establishment         @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  establishmentId String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}


