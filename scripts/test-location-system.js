/**
 * Script de test manuel du syst√®me de localisation
 * √Ä ex√©cuter dans la console du navigateur sur http://localhost:3003
 */

console.log('üß™ TESTS DU SYST√àME DE LOCALISATION');
console.log('=====================================');

// Test 1: V√©rifier que le badge de localisation est pr√©sent
function testBadgePresence() {
  console.log('\nüìç Test 1: Pr√©sence du badge de localisation');
  
  const badge = document.querySelector('[title="Changer de localisation"]');
  if (badge) {
    console.log('‚úÖ Badge trouv√©:', badge.textContent.trim());
    return true;
  } else {
    console.log('‚ùå Badge non trouv√©');
    return false;
  }
}

// Test 2: Tester l'ouverture du dropdown
function testDropdownOpen() {
  console.log('\nüîΩ Test 2: Ouverture du dropdown');
  
  const badge = document.querySelector('[title="Changer de localisation"]');
  if (!badge) {
    console.log('‚ùå Badge non trouv√©');
    return false;
  }
  
  badge.click();
  
  setTimeout(() => {
    const dropdown = document.querySelector('[class*="absolute top-full"]');
    if (dropdown) {
      console.log('‚úÖ Dropdown ouvert');
      
      // V√©rifier les √©l√©ments du dropdown
      const header = dropdown.querySelector('h3');
      const tabs = dropdown.querySelectorAll('[class*="flex-1"]');
      const searchInput = dropdown.querySelector('input[placeholder*="ville"]');
      
      console.log('üìã Header:', header?.textContent);
      console.log('üìë Onglets:', tabs.length);
      console.log('üîç Input recherche:', !!searchInput);
      
      return true;
    } else {
      console.log('‚ùå Dropdown non ouvert');
      return false;
    }
  }, 100);
}

// Test 3: Tester la fermeture du dropdown
function testDropdownClose() {
  console.log('\n‚ùå Test 3: Fermeture du dropdown');
  
  const badge = document.querySelector('[title="Changer de localisation"]');
  if (!badge) {
    console.log('‚ùå Badge non trouv√©');
    return false;
  }
  
  // Fermer avec un clic sur le badge
  badge.click();
  
  setTimeout(() => {
    const dropdown = document.querySelector('[class*="absolute top-full"]');
    if (!dropdown || dropdown.style.display === 'none') {
      console.log('‚úÖ Dropdown ferm√©');
      return true;
    } else {
      console.log('‚ùå Dropdown toujours ouvert');
      return false;
    }
  }, 100);
}

// Test 4: Tester la recherche de villes
function testCitySearch() {
  console.log('\nüîç Test 4: Recherche de villes');
  
  const badge = document.querySelector('[title="Changer de localisation"]');
  if (!badge) return false;
  
  badge.click();
  
  setTimeout(() => {
    const searchInput = document.querySelector('input[placeholder*="ville"]');
    if (!searchInput) {
      console.log('‚ùå Input de recherche non trouv√©');
      return false;
    }
    
    // Tester la recherche
    searchInput.value = 'Paris';
    searchInput.dispatchEvent(new Event('input', { bubbles: true }));
    
    console.log('‚úÖ Recherche test√©e: "Paris"');
    console.log('üìù Valeur input:', searchInput.value);
    
    return true;
  }, 100);
}

// Test 5: Tester le changement de rayon
function testRadiusChange() {
  console.log('\nüìè Test 5: Changement de rayon');
  
  const badge = document.querySelector('[title="Changer de localisation"]');
  if (!badge) return false;
  
  badge.click();
  
  setTimeout(() => {
    const radiusButtons = document.querySelectorAll('[class*="grid grid-cols-4"] button');
    if (radiusButtons.length === 0) {
      console.log('‚ùå Boutons de rayon non trouv√©s');
      return false;
    }
    
    // Cliquer sur le bouton 50km
    const button50km = Array.from(radiusButtons).find(btn => btn.textContent.includes('50km'));
    if (button50km) {
      button50km.click();
      console.log('‚úÖ Rayon chang√© vers 50km');
      return true;
    } else {
      console.log('‚ùå Bouton 50km non trouv√©');
      return false;
    }
  }, 100);
}

// Test 6: Tester la d√©tection GPS
function testGPSDetection() {
  console.log('\nüõ∞Ô∏è Test 6: D√©tection GPS');
  
  const badge = document.querySelector('[title="Changer de localisation"]');
  if (!badge) return false;
  
  badge.click();
  
  setTimeout(() => {
    const gpsButton = document.querySelector('button[class*="bg-blue-600"]');
    if (!gpsButton) {
      console.log('‚ùå Bouton GPS non trouv√©');
      return false;
    }
    
    console.log('‚úÖ Bouton GPS trouv√©:', gpsButton.textContent.trim());
    
    // Note: On ne clique pas r√©ellement pour √©viter les popups de permission
    console.log('‚ÑπÔ∏è Test simul√© (pas de clic r√©el pour √©viter les popups)');
    
    return true;
  }, 100);
}

// Test 7: V√©rifier les onglets
function testTabs() {
  console.log('\nüìë Test 7: Navigation entre onglets');
  
  const badge = document.querySelector('[title="Changer de localisation"]');
  if (!badge) return false;
  
  badge.click();
  
  setTimeout(() => {
    const tabs = document.querySelectorAll('[class*="flex-1"][class*="px-3 py-2"]');
    if (tabs.length < 3) {
      console.log('‚ùå Pas assez d\'onglets trouv√©s');
      return false;
    }
    
    console.log('‚úÖ Onglets trouv√©s:', tabs.length);
    
    // Tester le clic sur chaque onglet
    tabs.forEach((tab, index) => {
      console.log(`üìã Onglet ${index + 1}:`, tab.textContent.trim());
    });
    
    return true;
  }, 100);
}

// Test 8: V√©rifier la persistance localStorage
function testLocalStorage() {
  console.log('\nüíæ Test 8: Persistance localStorage');
  
  const locationData = localStorage.getItem('location-preferences');
  if (locationData) {
    try {
      const parsed = JSON.parse(locationData);
      console.log('‚úÖ Donn√©es localStorage trouv√©es:', parsed);
      return true;
    } catch (e) {
      console.log('‚ùå Erreur parsing localStorage:', e.message);
      return false;
    }
  } else {
    console.log('‚ÑπÔ∏è Aucune donn√©e localStorage (normal si premi√®re visite)');
    return true;
  }
}

// Test 9: V√©rifier l'int√©gration avec les composants
function testIntegration() {
  console.log('\nüîó Test 9: Int√©gration avec les composants');
  
  // V√©rifier EventsCarousel
  const eventsSection = document.querySelector('[class*="py-16"][class*="bg-gradient-to-b"]');
  if (eventsSection) {
    console.log('‚úÖ Section √©v√©nements trouv√©e');
  } else {
    console.log('‚ùå Section √©v√©nements non trouv√©e');
  }
  
  // V√©rifier DailyDealsCarousel
  const dealsSection = document.querySelector('[class*="py-16"][class*="bg-gradient-to-br"]');
  if (dealsSection) {
    console.log('‚úÖ Section bons plans trouv√©e');
  } else {
    console.log('‚ùå Section bons plans non trouv√©e');
  }
  
  return true;
}

// Test 10: V√©rifier les animations
function testAnimations() {
  console.log('\nüé® Test 10: Animations et transitions');
  
  const badge = document.querySelector('[title="Changer de localisation"]');
  if (!badge) return false;
  
  // V√©rifier les classes d'animation
  const hasTransition = badge.classList.toString().includes('transition');
  const hasTransform = badge.classList.toString().includes('transform');
  
  console.log('‚úÖ Classes de transition:', hasTransition);
  console.log('‚úÖ Classes de transform:', hasTransform);
  
  return true;
}

// Ex√©cuter tous les tests
function runAllTests() {
  console.log('üöÄ D√©marrage des tests...');
  
  const tests = [
    testBadgePresence,
    testDropdownOpen,
    testDropdownClose,
    testCitySearch,
    testRadiusChange,
    testGPSDetection,
    testTabs,
    testLocalStorage,
    testIntegration,
    testAnimations
  ];
  
  let passed = 0;
  let total = tests.length;
  
  tests.forEach((test, index) => {
    try {
      if (test()) {
        passed++;
      }
    } catch (error) {
      console.log(`‚ùå Test ${index + 1} a √©chou√©:`, error.message);
    }
  });
  
  console.log('\nüìä R√âSULTATS DES TESTS');
  console.log('======================');
  console.log(`‚úÖ Tests r√©ussis: ${passed}/${total}`);
  console.log(`‚ùå Tests √©chou√©s: ${total - passed}/${total}`);
  console.log(`üìà Taux de r√©ussite: ${Math.round((passed / total) * 100)}%`);
  
  if (passed === total) {
    console.log('üéâ TOUS LES TESTS SONT PASS√âS !');
  } else {
    console.log('‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.');
  }
}

// Instructions d'utilisation
console.log('\nüìã INSTRUCTIONS D\'UTILISATION:');
console.log('1. Ouvrez http://localhost:3003 dans votre navigateur');
console.log('2. Ouvrez la console d√©veloppeur (F12)');
console.log('3. Copiez-collez ce script dans la console');
console.log('4. Ou ex√©cutez: runAllTests()');
console.log('\nüí° Pour ex√©cuter un test individuel: testBadgePresence()');

// Export des fonctions pour utilisation manuelle
window.testLocationSystem = {
  runAllTests,
  testBadgePresence,
  testDropdownOpen,
  testDropdownClose,
  testCitySearch,
  testRadiusChange,
  testGPSDetection,
  testTabs,
  testLocalStorage,
  testIntegration,
  testAnimations
};

console.log('\nüîß Fonctions disponibles:');
console.log('- runAllTests() : Ex√©cuter tous les tests');
console.log('- testLocationSystem.testBadgePresence() : Test du badge');
console.log('- testLocationSystem.testDropdownOpen() : Test ouverture dropdown');
console.log('- etc...');
